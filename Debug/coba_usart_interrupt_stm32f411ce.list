
coba_usart_interrupt_stm32f411ce.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038a8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003a40  08003a40  00013a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a60  08003a60  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003a60  08003a60  00013a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a68  08003a68  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a68  08003a68  00013a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a6c  08003a6c  00013a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000010  08003a80  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08003a80  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101cd  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ff3  00000000  00000000  0003020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc8  00000000  00000000  00032200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be0  00000000  00000000  00032ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016e05  00000000  00000000  00033aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e067  00000000  00000000  0004a8ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e271  00000000  00000000  00058914  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6b85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003434  00000000  00000000  000e6c00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003a28 	.word	0x08003a28

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08003a28 	.word	0x08003a28

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <HAL_Init+0x40>)
 80004f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <HAL_Init+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <HAL_Init+0x40>)
 80004fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <HAL_Init+0x40>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a07      	ldr	r2, [pc, #28]	; (8000528 <HAL_Init+0x40>)
 800050a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000510:	2003      	movs	r0, #3
 8000512:	f000 f92b 	bl	800076c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000516:	200f      	movs	r0, #15
 8000518:	f000 f808 	bl	800052c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800051c:	f002 ffaa 	bl	8003474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40023c00 	.word	0x40023c00

0800052c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_InitTick+0x54>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x58>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000542:	fbb3 f3f1 	udiv	r3, r3, r1
 8000546:	fbb2 f3f3 	udiv	r3, r2, r3
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f943 	bl	80007d6 <HAL_SYSTICK_Config>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	e00e      	b.n	8000578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d80a      	bhi.n	8000576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000560:	2200      	movs	r2, #0
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	f04f 30ff 	mov.w	r0, #4294967295
 8000568:	f000 f90b 	bl	8000782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800056c:	4a06      	ldr	r2, [pc, #24]	; (8000588 <HAL_InitTick+0x5c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000572:	2300      	movs	r3, #0
 8000574:	e000      	b.n	8000578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	2000000c 	.word	0x2000000c
 8000584:	20000004 	.word	0x20000004
 8000588:	20000000 	.word	0x20000000

0800058c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_IncTick+0x20>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x24>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4413      	add	r3, r2
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_IncTick+0x24>)
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000040 	.word	0x20000040

080005b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return uwTick;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <HAL_GetTick+0x14>)
 80005ba:	681b      	ldr	r3, [r3, #0]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000040 	.word	0x20000040

080005cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f003 0307 	and.w	r3, r3, #7
 80005da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e8:	4013      	ands	r3, r2
 80005ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fe:	4a04      	ldr	r2, [pc, #16]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	60d3      	str	r3, [r2, #12]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <__NVIC_GetPriorityGrouping+0x18>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	0a1b      	lsrs	r3, r3, #8
 800061e:	f003 0307 	and.w	r3, r3, #7
}
 8000622:	4618      	mov	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063e:	2b00      	cmp	r3, #0
 8000640:	db0b      	blt.n	800065a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	f003 021f 	and.w	r2, r3, #31
 8000648:	4907      	ldr	r1, [pc, #28]	; (8000668 <__NVIC_EnableIRQ+0x38>)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	095b      	lsrs	r3, r3, #5
 8000650:	2001      	movs	r0, #1
 8000652:	fa00 f202 	lsl.w	r2, r0, r2
 8000656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e100 	.word	0xe000e100

0800066c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067c:	2b00      	cmp	r3, #0
 800067e:	db0a      	blt.n	8000696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	490c      	ldr	r1, [pc, #48]	; (80006b8 <__NVIC_SetPriority+0x4c>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	0112      	lsls	r2, r2, #4
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	440b      	add	r3, r1
 8000690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000694:	e00a      	b.n	80006ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4908      	ldr	r1, [pc, #32]	; (80006bc <__NVIC_SetPriority+0x50>)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 030f 	and.w	r3, r3, #15
 80006a2:	3b04      	subs	r3, #4
 80006a4:	0112      	lsls	r2, r2, #4
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	440b      	add	r3, r1
 80006aa:	761a      	strb	r2, [r3, #24]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000e100 	.word	0xe000e100
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	f1c3 0307 	rsb	r3, r3, #7
 80006da:	2b04      	cmp	r3, #4
 80006dc:	bf28      	it	cs
 80006de:	2304      	movcs	r3, #4
 80006e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3304      	adds	r3, #4
 80006e6:	2b06      	cmp	r3, #6
 80006e8:	d902      	bls.n	80006f0 <NVIC_EncodePriority+0x30>
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3b03      	subs	r3, #3
 80006ee:	e000      	b.n	80006f2 <NVIC_EncodePriority+0x32>
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	f04f 32ff 	mov.w	r2, #4294967295
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	43da      	mvns	r2, r3
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	401a      	ands	r2, r3
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000708:	f04f 31ff 	mov.w	r1, #4294967295
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	43d9      	mvns	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	4313      	orrs	r3, r2
         );
}
 800071a:	4618      	mov	r0, r3
 800071c:	3724      	adds	r7, #36	; 0x24
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
	...

08000728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000738:	d301      	bcc.n	800073e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800073a:	2301      	movs	r3, #1
 800073c:	e00f      	b.n	800075e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <SysTick_Config+0x40>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000746:	210f      	movs	r1, #15
 8000748:	f04f 30ff 	mov.w	r0, #4294967295
 800074c:	f7ff ff8e 	bl	800066c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <SysTick_Config+0x40>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000756:	4b04      	ldr	r3, [pc, #16]	; (8000768 <SysTick_Config+0x40>)
 8000758:	2207      	movs	r2, #7
 800075a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	e000e010 	.word	0xe000e010

0800076c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff29 	bl	80005cc <__NVIC_SetPriorityGrouping>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000782:	b580      	push	{r7, lr}
 8000784:	b086      	sub	sp, #24
 8000786:	af00      	add	r7, sp, #0
 8000788:	4603      	mov	r3, r0
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
 800078e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000794:	f7ff ff3e 	bl	8000614 <__NVIC_GetPriorityGrouping>
 8000798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	6978      	ldr	r0, [r7, #20]
 80007a0:	f7ff ff8e 	bl	80006c0 <NVIC_EncodePriority>
 80007a4:	4602      	mov	r2, r0
 80007a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff5d 	bl	800066c <__NVIC_SetPriority>
}
 80007b2:	bf00      	nop
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	4603      	mov	r3, r0
 80007c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff31 	bl	8000630 <__NVIC_EnableIRQ>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ffa2 	bl	8000728 <SysTick_Config>
 80007e4:	4603      	mov	r3, r0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80007fc:	f7ff feda 	bl	80005b4 <HAL_GetTick>
 8000800:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d101      	bne.n	800080c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000808:	2301      	movs	r3, #1
 800080a:	e099      	b.n	8000940 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2202      	movs	r2, #2
 8000810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f022 0201 	bic.w	r2, r2, #1
 800082a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800082c:	e00f      	b.n	800084e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800082e:	f7ff fec1 	bl	80005b4 <HAL_GetTick>
 8000832:	4602      	mov	r2, r0
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	2b05      	cmp	r3, #5
 800083a:	d908      	bls.n	800084e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2220      	movs	r2, #32
 8000840:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2203      	movs	r2, #3
 8000846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800084a:	2303      	movs	r3, #3
 800084c:	e078      	b.n	8000940 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1e8      	bne.n	800082e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000864:	697a      	ldr	r2, [r7, #20]
 8000866:	4b38      	ldr	r3, [pc, #224]	; (8000948 <HAL_DMA_Init+0x158>)
 8000868:	4013      	ands	r3, r2
 800086a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685a      	ldr	r2, [r3, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800087a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	691b      	ldr	r3, [r3, #16]
 8000880:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6a1b      	ldr	r3, [r3, #32]
 8000898:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800089a:	697a      	ldr	r2, [r7, #20]
 800089c:	4313      	orrs	r3, r2
 800089e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	d107      	bne.n	80008b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b0:	4313      	orrs	r3, r2
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	f023 0307 	bic.w	r3, r3, #7
 80008ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008de:	2b04      	cmp	r3, #4
 80008e0:	d117      	bne.n	8000912 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d00e      	beq.n	8000912 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f000 fa7b 	bl	8000df0 <DMA_CheckFifoParam>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d008      	beq.n	8000912 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2240      	movs	r2, #64	; 0x40
 8000904:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2201      	movs	r2, #1
 800090a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800090e:	2301      	movs	r3, #1
 8000910:	e016      	b.n	8000940 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 fa32 	bl	8000d84 <DMA_CalcBaseAndBitshift>
 8000920:	4603      	mov	r3, r0
 8000922:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000928:	223f      	movs	r2, #63	; 0x3f
 800092a:	409a      	lsls	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2200      	movs	r2, #0
 8000934:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2201      	movs	r2, #1
 800093a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800093e:	2300      	movs	r3, #0
}
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	f010803f 	.word	0xf010803f

0800094c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000958:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800095a:	f7ff fe2b 	bl	80005b4 <HAL_GetTick>
 800095e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b02      	cmp	r3, #2
 800096a:	d008      	beq.n	800097e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2280      	movs	r2, #128	; 0x80
 8000970:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2200      	movs	r2, #0
 8000976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e052      	b.n	8000a24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f022 0216 	bic.w	r2, r2, #22
 800098c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	695a      	ldr	r2, [r3, #20]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800099c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d103      	bne.n	80009ae <HAL_DMA_Abort+0x62>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f022 0208 	bic.w	r2, r2, #8
 80009bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f022 0201 	bic.w	r2, r2, #1
 80009cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80009ce:	e013      	b.n	80009f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80009d0:	f7ff fdf0 	bl	80005b4 <HAL_GetTick>
 80009d4:	4602      	mov	r2, r0
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	2b05      	cmp	r3, #5
 80009dc:	d90c      	bls.n	80009f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2220      	movs	r2, #32
 80009e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2203      	movs	r2, #3
 80009e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2200      	movs	r2, #0
 80009f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80009f4:	2303      	movs	r3, #3
 80009f6:	e015      	b.n	8000a24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d1e4      	bne.n	80009d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a0a:	223f      	movs	r2, #63	; 0x3f
 8000a0c:	409a      	lsls	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2201      	movs	r2, #1
 8000a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d004      	beq.n	8000a4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00c      	b.n	8000a64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2205      	movs	r2, #5
 8000a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f022 0201 	bic.w	r2, r2, #1
 8000a60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a7c:	4b92      	ldr	r3, [pc, #584]	; (8000cc8 <HAL_DMA_IRQHandler+0x258>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a92      	ldr	r2, [pc, #584]	; (8000ccc <HAL_DMA_IRQHandler+0x25c>)
 8000a82:	fba2 2303 	umull	r2, r3, r2, r3
 8000a86:	0a9b      	lsrs	r3, r3, #10
 8000a88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a9a:	2208      	movs	r2, #8
 8000a9c:	409a      	lsls	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d01a      	beq.n	8000adc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d013      	beq.n	8000adc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f022 0204 	bic.w	r2, r2, #4
 8000ac2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac8:	2208      	movs	r2, #8
 8000aca:	409a      	lsls	r2, r3
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ad4:	f043 0201 	orr.w	r2, r3, #1
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d012      	beq.n	8000b12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d00b      	beq.n	8000b12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000afe:	2201      	movs	r2, #1
 8000b00:	409a      	lsls	r2, r3
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b0a:	f043 0202 	orr.w	r2, r3, #2
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b16:	2204      	movs	r2, #4
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d012      	beq.n	8000b48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00b      	beq.n	8000b48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b34:	2204      	movs	r2, #4
 8000b36:	409a      	lsls	r2, r3
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b40:	f043 0204 	orr.w	r2, r3, #4
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b4c:	2210      	movs	r2, #16
 8000b4e:	409a      	lsls	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4013      	ands	r3, r2
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d043      	beq.n	8000be0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f003 0308 	and.w	r3, r3, #8
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d03c      	beq.n	8000be0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b6a:	2210      	movs	r2, #16
 8000b6c:	409a      	lsls	r2, r3
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d018      	beq.n	8000bb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d108      	bne.n	8000ba0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d024      	beq.n	8000be0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	4798      	blx	r3
 8000b9e:	e01f      	b.n	8000be0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d01b      	beq.n	8000be0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	4798      	blx	r3
 8000bb0:	e016      	b.n	8000be0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d107      	bne.n	8000bd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f022 0208 	bic.w	r2, r2, #8
 8000bce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000be4:	2220      	movs	r2, #32
 8000be6:	409a      	lsls	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4013      	ands	r3, r2
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f000 808e 	beq.w	8000d0e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f003 0310 	and.w	r3, r3, #16
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f000 8086 	beq.w	8000d0e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c06:	2220      	movs	r2, #32
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b05      	cmp	r3, #5
 8000c18:	d136      	bne.n	8000c88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f022 0216 	bic.w	r2, r2, #22
 8000c28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	695a      	ldr	r2, [r3, #20]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d103      	bne.n	8000c4a <HAL_DMA_IRQHandler+0x1da>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d007      	beq.n	8000c5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f022 0208 	bic.w	r2, r2, #8
 8000c58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c5e:	223f      	movs	r2, #63	; 0x3f
 8000c60:	409a      	lsls	r2, r3
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d07d      	beq.n	8000d7a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	4798      	blx	r3
        }
        return;
 8000c86:	e078      	b.n	8000d7a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d01c      	beq.n	8000cd0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d108      	bne.n	8000cb6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d030      	beq.n	8000d0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	4798      	blx	r3
 8000cb4:	e02b      	b.n	8000d0e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d027      	beq.n	8000d0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	4798      	blx	r3
 8000cc6:	e022      	b.n	8000d0e <HAL_DMA_IRQHandler+0x29e>
 8000cc8:	2000000c 	.word	0x2000000c
 8000ccc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d10f      	bne.n	8000cfe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 0210 	bic.w	r2, r2, #16
 8000cec:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d032      	beq.n	8000d7c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d022      	beq.n	8000d68 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2205      	movs	r2, #5
 8000d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f022 0201 	bic.w	r2, r2, #1
 8000d38:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d307      	bcc.n	8000d56 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1f2      	bne.n	8000d3a <HAL_DMA_IRQHandler+0x2ca>
 8000d54:	e000      	b.n	8000d58 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000d56:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d005      	beq.n	8000d7c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	4798      	blx	r3
 8000d78:	e000      	b.n	8000d7c <HAL_DMA_IRQHandler+0x30c>
        return;
 8000d7a:	bf00      	nop
    }
  }
}
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop

08000d84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	3b10      	subs	r3, #16
 8000d94:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <DMA_CalcBaseAndBitshift+0x64>)
 8000d96:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9a:	091b      	lsrs	r3, r3, #4
 8000d9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d9e:	4a13      	ldr	r2, [pc, #76]	; (8000dec <DMA_CalcBaseAndBitshift+0x68>)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4413      	add	r3, r2
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d909      	bls.n	8000dc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dba:	f023 0303 	bic.w	r3, r3, #3
 8000dbe:	1d1a      	adds	r2, r3, #4
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	659a      	str	r2, [r3, #88]	; 0x58
 8000dc4:	e007      	b.n	8000dd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dce:	f023 0303 	bic.w	r3, r3, #3
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	aaaaaaab 	.word	0xaaaaaaab
 8000dec:	08003a40 	.word	0x08003a40

08000df0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d11f      	bne.n	8000e4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d855      	bhi.n	8000ebc <DMA_CheckFifoParam+0xcc>
 8000e10:	a201      	add	r2, pc, #4	; (adr r2, 8000e18 <DMA_CheckFifoParam+0x28>)
 8000e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e16:	bf00      	nop
 8000e18:	08000e29 	.word	0x08000e29
 8000e1c:	08000e3b 	.word	0x08000e3b
 8000e20:	08000e29 	.word	0x08000e29
 8000e24:	08000ebd 	.word	0x08000ebd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d045      	beq.n	8000ec0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e38:	e042      	b.n	8000ec0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e42:	d13f      	bne.n	8000ec4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e48:	e03c      	b.n	8000ec4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e52:	d121      	bne.n	8000e98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	d836      	bhi.n	8000ec8 <DMA_CheckFifoParam+0xd8>
 8000e5a:	a201      	add	r2, pc, #4	; (adr r2, 8000e60 <DMA_CheckFifoParam+0x70>)
 8000e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e60:	08000e71 	.word	0x08000e71
 8000e64:	08000e77 	.word	0x08000e77
 8000e68:	08000e71 	.word	0x08000e71
 8000e6c:	08000e89 	.word	0x08000e89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
      break;
 8000e74:	e02f      	b.n	8000ed6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d024      	beq.n	8000ecc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e86:	e021      	b.n	8000ecc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e90:	d11e      	bne.n	8000ed0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e96:	e01b      	b.n	8000ed0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d902      	bls.n	8000ea4 <DMA_CheckFifoParam+0xb4>
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d003      	beq.n	8000eaa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000ea2:	e018      	b.n	8000ed6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8000ea8:	e015      	b.n	8000ed6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00e      	beq.n	8000ed4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	73fb      	strb	r3, [r7, #15]
      break;
 8000eba:	e00b      	b.n	8000ed4 <DMA_CheckFifoParam+0xe4>
      break;
 8000ebc:	bf00      	nop
 8000ebe:	e00a      	b.n	8000ed6 <DMA_CheckFifoParam+0xe6>
      break;
 8000ec0:	bf00      	nop
 8000ec2:	e008      	b.n	8000ed6 <DMA_CheckFifoParam+0xe6>
      break;
 8000ec4:	bf00      	nop
 8000ec6:	e006      	b.n	8000ed6 <DMA_CheckFifoParam+0xe6>
      break;
 8000ec8:	bf00      	nop
 8000eca:	e004      	b.n	8000ed6 <DMA_CheckFifoParam+0xe6>
      break;
 8000ecc:	bf00      	nop
 8000ece:	e002      	b.n	8000ed6 <DMA_CheckFifoParam+0xe6>
      break;   
 8000ed0:	bf00      	nop
 8000ed2:	e000      	b.n	8000ed6 <DMA_CheckFifoParam+0xe6>
      break;
 8000ed4:	bf00      	nop
    }
  } 
  
  return status; 
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	e159      	b.n	80011b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	f040 8148 	bne.w	80011ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d005      	beq.n	8000f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d130      	bne.n	8000f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	091b      	lsrs	r3, r3, #4
 8000f82:	f003 0201 	and.w	r2, r3, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d017      	beq.n	8000fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d123      	bne.n	8001028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691a      	ldr	r2, [r3, #16]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	08da      	lsrs	r2, r3, #3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3208      	adds	r2, #8
 8001022:	69b9      	ldr	r1, [r7, #24]
 8001024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0203 	and.w	r2, r3, #3
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80a2 	beq.w	80011ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b56      	ldr	r3, [pc, #344]	; (80011c8 <HAL_GPIO_Init+0x2e4>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a55      	ldr	r2, [pc, #340]	; (80011c8 <HAL_GPIO_Init+0x2e4>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b53      	ldr	r3, [pc, #332]	; (80011c8 <HAL_GPIO_Init+0x2e4>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001086:	4a51      	ldr	r2, [pc, #324]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a48      	ldr	r2, [pc, #288]	; (80011d0 <HAL_GPIO_Init+0x2ec>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d019      	beq.n	80010e6 <HAL_GPIO_Init+0x202>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a47      	ldr	r2, [pc, #284]	; (80011d4 <HAL_GPIO_Init+0x2f0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x1fe>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a46      	ldr	r2, [pc, #280]	; (80011d8 <HAL_GPIO_Init+0x2f4>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x1fa>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a45      	ldr	r2, [pc, #276]	; (80011dc <HAL_GPIO_Init+0x2f8>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x1f6>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a44      	ldr	r2, [pc, #272]	; (80011e0 <HAL_GPIO_Init+0x2fc>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x1f2>
 80010d2:	2304      	movs	r3, #4
 80010d4:	e008      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010d6:	2307      	movs	r3, #7
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010da:	2303      	movs	r3, #3
 80010dc:	e004      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010de:	2302      	movs	r3, #2
 80010e0:	e002      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x204>
 80010e6:	2300      	movs	r3, #0
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	f002 0203 	and.w	r2, r2, #3
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	4093      	lsls	r3, r2
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f8:	4934      	ldr	r1, [pc, #208]	; (80011cc <HAL_GPIO_Init+0x2e8>)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001106:	4b37      	ldr	r3, [pc, #220]	; (80011e4 <HAL_GPIO_Init+0x300>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800112a:	4a2e      	ldr	r2, [pc, #184]	; (80011e4 <HAL_GPIO_Init+0x300>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001130:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <HAL_GPIO_Init+0x300>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001154:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <HAL_GPIO_Init+0x300>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <HAL_GPIO_Init+0x300>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117e:	4a19      	ldr	r2, [pc, #100]	; (80011e4 <HAL_GPIO_Init+0x300>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <HAL_GPIO_Init+0x300>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a8:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <HAL_GPIO_Init+0x300>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3301      	adds	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	2b0f      	cmp	r3, #15
 80011b8:	f67f aea2 	bls.w	8000f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011bc:	bf00      	nop
 80011be:	3724      	adds	r7, #36	; 0x24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40013800 	.word	0x40013800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40020c00 	.word	0x40020c00
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40013c00 	.word	0x40013c00

080011e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
 80011f4:	4613      	mov	r3, r2
 80011f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f8:	787b      	ldrb	r3, [r7, #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001204:	e003      	b.n	800120e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	041a      	lsls	r2, r3, #16
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	619a      	str	r2, [r3, #24]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800121a:	b480      	push	{r7}
 800121c:	b085      	sub	sp, #20
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	460b      	mov	r3, r1
 8001224:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800122c:	887a      	ldrh	r2, [r7, #2]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4013      	ands	r3, r2
 8001232:	041a      	lsls	r2, r3, #16
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43d9      	mvns	r1, r3
 8001238:	887b      	ldrh	r3, [r7, #2]
 800123a:	400b      	ands	r3, r1
 800123c:	431a      	orrs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	619a      	str	r2, [r3, #24]
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e264      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d075      	beq.n	800135a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126e:	4ba3      	ldr	r3, [pc, #652]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b04      	cmp	r3, #4
 8001278:	d00c      	beq.n	8001294 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	4ba0      	ldr	r3, [pc, #640]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001282:	2b08      	cmp	r3, #8
 8001284:	d112      	bne.n	80012ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001286:	4b9d      	ldr	r3, [pc, #628]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001292:	d10b      	bne.n	80012ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	4b99      	ldr	r3, [pc, #612]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d05b      	beq.n	8001358 <HAL_RCC_OscConfig+0x108>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d157      	bne.n	8001358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e23f      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b4:	d106      	bne.n	80012c4 <HAL_RCC_OscConfig+0x74>
 80012b6:	4b91      	ldr	r3, [pc, #580]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a90      	ldr	r2, [pc, #576]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e01d      	b.n	8001300 <HAL_RCC_OscConfig+0xb0>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x98>
 80012ce:	4b8b      	ldr	r3, [pc, #556]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a8a      	ldr	r2, [pc, #552]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b88      	ldr	r3, [pc, #544]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a87      	ldr	r2, [pc, #540]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e00b      	b.n	8001300 <HAL_RCC_OscConfig+0xb0>
 80012e8:	4b84      	ldr	r3, [pc, #528]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a83      	ldr	r2, [pc, #524]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b81      	ldr	r3, [pc, #516]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a80      	ldr	r2, [pc, #512]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80012fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d013      	beq.n	8001330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff f954 	bl	80005b4 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff f950 	bl	80005b4 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	; 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e204      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	4b76      	ldr	r3, [pc, #472]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0xc0>
 800132e:	e014      	b.n	800135a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff f940 	bl	80005b4 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001338:	f7ff f93c 	bl	80005b4 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b64      	cmp	r3, #100	; 0x64
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e1f0      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134a:	4b6c      	ldr	r3, [pc, #432]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0xe8>
 8001356:	e000      	b.n	800135a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d063      	beq.n	800142e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001366:	4b65      	ldr	r3, [pc, #404]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00b      	beq.n	800138a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001372:	4b62      	ldr	r3, [pc, #392]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137a:	2b08      	cmp	r3, #8
 800137c:	d11c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137e:	4b5f      	ldr	r3, [pc, #380]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d116      	bne.n	80013b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138a:	4b5c      	ldr	r3, [pc, #368]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <HAL_RCC_OscConfig+0x152>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d001      	beq.n	80013a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e1c4      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a2:	4b56      	ldr	r3, [pc, #344]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4952      	ldr	r1, [pc, #328]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b6:	e03a      	b.n	800142e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d020      	beq.n	8001402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c0:	4b4f      	ldr	r3, [pc, #316]	; (8001500 <HAL_RCC_OscConfig+0x2b0>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff f8f5 	bl	80005b4 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ce:	f7ff f8f1 	bl	80005b4 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e1a5      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e0:	4b46      	ldr	r3, [pc, #280]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ec:	4b43      	ldr	r3, [pc, #268]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	4940      	ldr	r1, [pc, #256]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]
 8001400:	e015      	b.n	800142e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001402:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <HAL_RCC_OscConfig+0x2b0>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff f8d4 	bl	80005b4 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001410:	f7ff f8d0 	bl	80005b4 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e184      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001422:	4b36      	ldr	r3, [pc, #216]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d030      	beq.n	800149c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d016      	beq.n	8001470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001442:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_RCC_OscConfig+0x2b4>)
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001448:	f7ff f8b4 	bl	80005b4 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001450:	f7ff f8b0 	bl	80005b4 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e164      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x200>
 800146e:	e015      	b.n	800149c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001470:	4b24      	ldr	r3, [pc, #144]	; (8001504 <HAL_RCC_OscConfig+0x2b4>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001476:	f7ff f89d 	bl	80005b4 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147e:	f7ff f899 	bl	80005b4 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e14d      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 8001492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f0      	bne.n	800147e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80a0 	beq.w	80015ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10f      	bne.n	80014da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_RCC_OscConfig+0x2b8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d121      	bne.n	800152a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_RCC_OscConfig+0x2b8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_RCC_OscConfig+0x2b8>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f2:	f7ff f85f 	bl	80005b4 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	e011      	b.n	800151e <HAL_RCC_OscConfig+0x2ce>
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	42470000 	.word	0x42470000
 8001504:	42470e80 	.word	0x42470e80
 8001508:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150c:	f7ff f852 	bl	80005b4 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e106      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	4b85      	ldr	r3, [pc, #532]	; (8001734 <HAL_RCC_OscConfig+0x4e4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d106      	bne.n	8001540 <HAL_RCC_OscConfig+0x2f0>
 8001532:	4b81      	ldr	r3, [pc, #516]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	4a80      	ldr	r2, [pc, #512]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6713      	str	r3, [r2, #112]	; 0x70
 800153e:	e01c      	b.n	800157a <HAL_RCC_OscConfig+0x32a>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b05      	cmp	r3, #5
 8001546:	d10c      	bne.n	8001562 <HAL_RCC_OscConfig+0x312>
 8001548:	4b7b      	ldr	r3, [pc, #492]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a7a      	ldr	r2, [pc, #488]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
 8001554:	4b78      	ldr	r3, [pc, #480]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	4a77      	ldr	r2, [pc, #476]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6713      	str	r3, [r2, #112]	; 0x70
 8001560:	e00b      	b.n	800157a <HAL_RCC_OscConfig+0x32a>
 8001562:	4b75      	ldr	r3, [pc, #468]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	4a74      	ldr	r2, [pc, #464]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 8001568:	f023 0301 	bic.w	r3, r3, #1
 800156c:	6713      	str	r3, [r2, #112]	; 0x70
 800156e:	4b72      	ldr	r3, [pc, #456]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	4a71      	ldr	r2, [pc, #452]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 8001574:	f023 0304 	bic.w	r3, r3, #4
 8001578:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d015      	beq.n	80015ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001582:	f7ff f817 	bl	80005b4 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001588:	e00a      	b.n	80015a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800158a:	f7ff f813 	bl	80005b4 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	f241 3288 	movw	r2, #5000	; 0x1388
 8001598:	4293      	cmp	r3, r2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e0c5      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a0:	4b65      	ldr	r3, [pc, #404]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0ee      	beq.n	800158a <HAL_RCC_OscConfig+0x33a>
 80015ac:	e014      	b.n	80015d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ae:	f7ff f801 	bl	80005b4 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b4:	e00a      	b.n	80015cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b6:	f7fe fffd 	bl	80005b4 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e0af      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015cc:	4b5a      	ldr	r3, [pc, #360]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1ee      	bne.n	80015b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d105      	bne.n	80015ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015de:	4b56      	ldr	r3, [pc, #344]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a55      	ldr	r2, [pc, #340]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 80015e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 809b 	beq.w	800172a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015f4:	4b50      	ldr	r3, [pc, #320]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d05c      	beq.n	80016ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d141      	bne.n	800168c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001608:	4b4c      	ldr	r3, [pc, #304]	; (800173c <HAL_RCC_OscConfig+0x4ec>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7fe ffd1 	bl	80005b4 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001616:	f7fe ffcd 	bl	80005b4 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e081      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001628:	4b43      	ldr	r3, [pc, #268]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f0      	bne.n	8001616 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69da      	ldr	r2, [r3, #28]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	019b      	lsls	r3, r3, #6
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	085b      	lsrs	r3, r3, #1
 800164c:	3b01      	subs	r3, #1
 800164e:	041b      	lsls	r3, r3, #16
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	061b      	lsls	r3, r3, #24
 8001658:	4937      	ldr	r1, [pc, #220]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 800165a:	4313      	orrs	r3, r2
 800165c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165e:	4b37      	ldr	r3, [pc, #220]	; (800173c <HAL_RCC_OscConfig+0x4ec>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7fe ffa6 	bl	80005b4 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166c:	f7fe ffa2 	bl	80005b4 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e056      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167e:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x41c>
 800168a:	e04e      	b.n	800172a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168c:	4b2b      	ldr	r3, [pc, #172]	; (800173c <HAL_RCC_OscConfig+0x4ec>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7fe ff8f 	bl	80005b4 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169a:	f7fe ff8b 	bl	80005b4 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e03f      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x44a>
 80016b8:	e037      	b.n	800172a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e032      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <HAL_RCC_OscConfig+0x4e8>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d028      	beq.n	8001726 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016de:	429a      	cmp	r2, r3
 80016e0:	d121      	bne.n	8001726 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d11a      	bne.n	8001726 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016f6:	4013      	ands	r3, r2
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016fe:	4293      	cmp	r3, r2
 8001700:	d111      	bne.n	8001726 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	085b      	lsrs	r3, r3, #1
 800170e:	3b01      	subs	r3, #1
 8001710:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d107      	bne.n	8001726 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40007000 	.word	0x40007000
 8001738:	40023800 	.word	0x40023800
 800173c:	42470060 	.word	0x42470060

08001740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0cc      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001754:	4b68      	ldr	r3, [pc, #416]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d90c      	bls.n	800177c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b65      	ldr	r3, [pc, #404]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b63      	ldr	r3, [pc, #396]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0b8      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d020      	beq.n	80017ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a58      	ldr	r2, [pc, #352]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800179e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a52      	ldr	r2, [pc, #328]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	494d      	ldr	r1, [pc, #308]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d044      	beq.n	8001860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d119      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e07f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d003      	beq.n	80017fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e06f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180e:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e067      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181e:	4b37      	ldr	r3, [pc, #220]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f023 0203 	bic.w	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4934      	ldr	r1, [pc, #208]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	4313      	orrs	r3, r2
 800182e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001830:	f7fe fec0 	bl	80005b4 <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	e00a      	b.n	800184e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001838:	f7fe febc 	bl	80005b4 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	; 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e04f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 020c 	and.w	r2, r3, #12
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	429a      	cmp	r2, r3
 800185e:	d1eb      	bne.n	8001838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d20c      	bcs.n	8001888 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e032      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4916      	ldr	r1, [pc, #88]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	490e      	ldr	r1, [pc, #56]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018c6:	f000 f821 	bl	800190c <HAL_RCC_GetSysClockFreq>
 80018ca:	4601      	mov	r1, r0
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	5cd3      	ldrb	r3, [r2, r3]
 80018da:	fa21 f303 	lsr.w	r3, r1, r3
 80018de:	4a09      	ldr	r2, [pc, #36]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1c8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe20 	bl	800052c <HAL_InitTick>

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023c00 	.word	0x40023c00
 80018fc:	40023800 	.word	0x40023800
 8001900:	08003a48 	.word	0x08003a48
 8001904:	2000000c 	.word	0x2000000c
 8001908:	20000000 	.word	0x20000000

0800190c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800190c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	2300      	movs	r3, #0
 800191c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001922:	4b50      	ldr	r3, [pc, #320]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x158>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b04      	cmp	r3, #4
 800192c:	d007      	beq.n	800193e <HAL_RCC_GetSysClockFreq+0x32>
 800192e:	2b08      	cmp	r3, #8
 8001930:	d008      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x38>
 8001932:	2b00      	cmp	r3, #0
 8001934:	f040 808d 	bne.w	8001a52 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001938:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x15c>)
 800193a:	60bb      	str	r3, [r7, #8]
       break;
 800193c:	e08c      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800193e:	4b4b      	ldr	r3, [pc, #300]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8001940:	60bb      	str	r3, [r7, #8]
      break;
 8001942:	e089      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001944:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x158>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800194c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800194e:	4b45      	ldr	r3, [pc, #276]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x158>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d023      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195a:	4b42      	ldr	r3, [pc, #264]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x158>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	099b      	lsrs	r3, r3, #6
 8001960:	f04f 0400 	mov.w	r4, #0
 8001964:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	ea03 0501 	and.w	r5, r3, r1
 8001970:	ea04 0602 	and.w	r6, r4, r2
 8001974:	4a3d      	ldr	r2, [pc, #244]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8001976:	fb02 f106 	mul.w	r1, r2, r6
 800197a:	2200      	movs	r2, #0
 800197c:	fb02 f205 	mul.w	r2, r2, r5
 8001980:	440a      	add	r2, r1
 8001982:	493a      	ldr	r1, [pc, #232]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8001984:	fba5 0101 	umull	r0, r1, r5, r1
 8001988:	1853      	adds	r3, r2, r1
 800198a:	4619      	mov	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f04f 0400 	mov.w	r4, #0
 8001992:	461a      	mov	r2, r3
 8001994:	4623      	mov	r3, r4
 8001996:	f7fe fc27 	bl	80001e8 <__aeabi_uldivmod>
 800199a:	4603      	mov	r3, r0
 800199c:	460c      	mov	r4, r1
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	e049      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a2:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x158>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	099b      	lsrs	r3, r3, #6
 80019a8:	f04f 0400 	mov.w	r4, #0
 80019ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	ea03 0501 	and.w	r5, r3, r1
 80019b8:	ea04 0602 	and.w	r6, r4, r2
 80019bc:	4629      	mov	r1, r5
 80019be:	4632      	mov	r2, r6
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	f04f 0400 	mov.w	r4, #0
 80019c8:	0154      	lsls	r4, r2, #5
 80019ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019ce:	014b      	lsls	r3, r1, #5
 80019d0:	4619      	mov	r1, r3
 80019d2:	4622      	mov	r2, r4
 80019d4:	1b49      	subs	r1, r1, r5
 80019d6:	eb62 0206 	sbc.w	r2, r2, r6
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	f04f 0400 	mov.w	r4, #0
 80019e2:	0194      	lsls	r4, r2, #6
 80019e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019e8:	018b      	lsls	r3, r1, #6
 80019ea:	1a5b      	subs	r3, r3, r1
 80019ec:	eb64 0402 	sbc.w	r4, r4, r2
 80019f0:	f04f 0100 	mov.w	r1, #0
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	00e2      	lsls	r2, r4, #3
 80019fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019fe:	00d9      	lsls	r1, r3, #3
 8001a00:	460b      	mov	r3, r1
 8001a02:	4614      	mov	r4, r2
 8001a04:	195b      	adds	r3, r3, r5
 8001a06:	eb44 0406 	adc.w	r4, r4, r6
 8001a0a:	f04f 0100 	mov.w	r1, #0
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	02a2      	lsls	r2, r4, #10
 8001a14:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a18:	0299      	lsls	r1, r3, #10
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4614      	mov	r4, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	4621      	mov	r1, r4
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f04f 0400 	mov.w	r4, #0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4623      	mov	r3, r4
 8001a2c:	f7fe fbdc 	bl	80001e8 <__aeabi_uldivmod>
 8001a30:	4603      	mov	r3, r0
 8001a32:	460c      	mov	r4, r1
 8001a34:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	0c1b      	lsrs	r3, r3, #16
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	3301      	adds	r3, #1
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	60bb      	str	r3, [r7, #8]
      break;
 8001a50:	e002      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a54:	60bb      	str	r3, [r7, #8]
      break;
 8001a56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a58:	68bb      	ldr	r3, [r7, #8]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	00f42400 	.word	0x00f42400
 8001a6c:	017d7840 	.word	0x017d7840

08001a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	2000000c 	.word	0x2000000c

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a8c:	f7ff fff0 	bl	8001a70 <HAL_RCC_GetHCLKFreq>
 8001a90:	4601      	mov	r1, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	0a9b      	lsrs	r3, r3, #10
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4a03      	ldr	r2, [pc, #12]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a9e:	5cd3      	ldrb	r3, [r2, r3]
 8001aa0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	08003a58 	.word	0x08003a58

08001ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ab4:	f7ff ffdc 	bl	8001a70 <HAL_RCC_GetHCLKFreq>
 8001ab8:	4601      	mov	r1, r0
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	0b5b      	lsrs	r3, r3, #13
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	4a03      	ldr	r2, [pc, #12]	; (8001ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ac6:	5cd3      	ldrb	r3, [r2, r3]
 8001ac8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	08003a58 	.word	0x08003a58

08001ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e041      	b.n	8001b6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d106      	bne.n	8001b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f001 fd9c 	bl	800363c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3304      	adds	r3, #4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f000 fa7c 	bl	8002014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d001      	beq.n	8001b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e044      	b.n	8001c1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <HAL_TIM_Base_Start_IT+0xb0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d018      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x6c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bba:	d013      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x6c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1a      	ldr	r2, [pc, #104]	; (8001c2c <HAL_TIM_Base_Start_IT+0xb4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00e      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x6c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <HAL_TIM_Base_Start_IT+0xb8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d009      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x6c>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <HAL_TIM_Base_Start_IT+0xbc>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d004      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x6c>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a16      	ldr	r2, [pc, #88]	; (8001c38 <HAL_TIM_Base_Start_IT+0xc0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d111      	bne.n	8001c08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d010      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 0201 	orr.w	r2, r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c06:	e007      	b.n	8001c18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	40000400 	.word	0x40000400
 8001c30:	40000800 	.word	0x40000800
 8001c34:	40000c00 	.word	0x40000c00
 8001c38:	40014000 	.word	0x40014000

08001c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d122      	bne.n	8001c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d11b      	bne.n	8001c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0202 	mvn.w	r2, #2
 8001c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f9aa 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001c84:	e005      	b.n	8001c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f99c 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f9ad 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d122      	bne.n	8001cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d11b      	bne.n	8001cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f06f 0204 	mvn.w	r2, #4
 8001cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f980 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001cd8:	e005      	b.n	8001ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f972 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f983 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d122      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d11b      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 0208 	mvn.w	r2, #8
 8001d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2204      	movs	r2, #4
 8001d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f956 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001d2c:	e005      	b.n	8001d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f948 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f959 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b10      	cmp	r3, #16
 8001d4c:	d122      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b10      	cmp	r3, #16
 8001d5a:	d11b      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0210 	mvn.w	r2, #16
 8001d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2208      	movs	r2, #8
 8001d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f92c 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001d80:	e005      	b.n	8001d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f91e 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f92f 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d10e      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d107      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0201 	mvn.w	r2, #1
 8001db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f001 fab2 	bl	8003324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dca:	2b80      	cmp	r3, #128	; 0x80
 8001dcc:	d10e      	bne.n	8001dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd8:	2b80      	cmp	r3, #128	; 0x80
 8001dda:	d107      	bne.n	8001dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 faa6 	bl	8002338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df6:	2b40      	cmp	r3, #64	; 0x40
 8001df8:	d10e      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e04:	2b40      	cmp	r3, #64	; 0x40
 8001e06:	d107      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8f4 	bl	8002000 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0320 	and.w	r3, r3, #32
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	d10e      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	d107      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0220 	mvn.w	r2, #32
 8001e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fa70 	bl	8002324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_TIM_ConfigClockSource+0x1c>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e0a9      	b.n	8001fbc <HAL_TIM_ConfigClockSource+0x170>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b40      	cmp	r3, #64	; 0x40
 8001e9e:	d067      	beq.n	8001f70 <HAL_TIM_ConfigClockSource+0x124>
 8001ea0:	2b40      	cmp	r3, #64	; 0x40
 8001ea2:	d80b      	bhi.n	8001ebc <HAL_TIM_ConfigClockSource+0x70>
 8001ea4:	2b10      	cmp	r3, #16
 8001ea6:	d073      	beq.n	8001f90 <HAL_TIM_ConfigClockSource+0x144>
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	d802      	bhi.n	8001eb2 <HAL_TIM_ConfigClockSource+0x66>
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d06f      	beq.n	8001f90 <HAL_TIM_ConfigClockSource+0x144>
 8001eb0:	e077      	b.n	8001fa2 <HAL_TIM_ConfigClockSource+0x156>
 8001eb2:	2b20      	cmp	r3, #32
 8001eb4:	d06c      	beq.n	8001f90 <HAL_TIM_ConfigClockSource+0x144>
 8001eb6:	2b30      	cmp	r3, #48	; 0x30
 8001eb8:	d06a      	beq.n	8001f90 <HAL_TIM_ConfigClockSource+0x144>
 8001eba:	e072      	b.n	8001fa2 <HAL_TIM_ConfigClockSource+0x156>
 8001ebc:	2b70      	cmp	r3, #112	; 0x70
 8001ebe:	d00d      	beq.n	8001edc <HAL_TIM_ConfigClockSource+0x90>
 8001ec0:	2b70      	cmp	r3, #112	; 0x70
 8001ec2:	d804      	bhi.n	8001ece <HAL_TIM_ConfigClockSource+0x82>
 8001ec4:	2b50      	cmp	r3, #80	; 0x50
 8001ec6:	d033      	beq.n	8001f30 <HAL_TIM_ConfigClockSource+0xe4>
 8001ec8:	2b60      	cmp	r3, #96	; 0x60
 8001eca:	d041      	beq.n	8001f50 <HAL_TIM_ConfigClockSource+0x104>
 8001ecc:	e069      	b.n	8001fa2 <HAL_TIM_ConfigClockSource+0x156>
 8001ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed2:	d069      	beq.n	8001fa8 <HAL_TIM_ConfigClockSource+0x15c>
 8001ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ed8:	d017      	beq.n	8001f0a <HAL_TIM_ConfigClockSource+0xbe>
 8001eda:	e062      	b.n	8001fa2 <HAL_TIM_ConfigClockSource+0x156>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6899      	ldr	r1, [r3, #8]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f000 f98c 	bl	8002208 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001efe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	609a      	str	r2, [r3, #8]
      break;
 8001f08:	e04f      	b.n	8001faa <HAL_TIM_ConfigClockSource+0x15e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6899      	ldr	r1, [r3, #8]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f000 f975 	bl	8002208 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f2c:	609a      	str	r2, [r3, #8]
      break;
 8001f2e:	e03c      	b.n	8001faa <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f000 f8e9 	bl	8002114 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2150      	movs	r1, #80	; 0x50
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 f942 	bl	80021d2 <TIM_ITRx_SetConfig>
      break;
 8001f4e:	e02c      	b.n	8001faa <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6859      	ldr	r1, [r3, #4]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f000 f908 	bl	8002172 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2160      	movs	r1, #96	; 0x60
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 f932 	bl	80021d2 <TIM_ITRx_SetConfig>
      break;
 8001f6e:	e01c      	b.n	8001faa <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f000 f8c9 	bl	8002114 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2140      	movs	r1, #64	; 0x40
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 f922 	bl	80021d2 <TIM_ITRx_SetConfig>
      break;
 8001f8e:	e00c      	b.n	8001faa <HAL_TIM_ConfigClockSource+0x15e>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	f000 f919 	bl	80021d2 <TIM_ITRx_SetConfig>
      break;
 8001fa0:	e003      	b.n	8001faa <HAL_TIM_ConfigClockSource+0x15e>
    }

    default:
      status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa6:	e000      	b.n	8001faa <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8001fa8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a34      	ldr	r2, [pc, #208]	; (80020f8 <TIM_Base_SetConfig+0xe4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00f      	beq.n	800204c <TIM_Base_SetConfig+0x38>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002032:	d00b      	beq.n	800204c <TIM_Base_SetConfig+0x38>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a31      	ldr	r2, [pc, #196]	; (80020fc <TIM_Base_SetConfig+0xe8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d007      	beq.n	800204c <TIM_Base_SetConfig+0x38>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a30      	ldr	r2, [pc, #192]	; (8002100 <TIM_Base_SetConfig+0xec>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d003      	beq.n	800204c <TIM_Base_SetConfig+0x38>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a2f      	ldr	r2, [pc, #188]	; (8002104 <TIM_Base_SetConfig+0xf0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d108      	bne.n	800205e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a25      	ldr	r2, [pc, #148]	; (80020f8 <TIM_Base_SetConfig+0xe4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01b      	beq.n	800209e <TIM_Base_SetConfig+0x8a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800206c:	d017      	beq.n	800209e <TIM_Base_SetConfig+0x8a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a22      	ldr	r2, [pc, #136]	; (80020fc <TIM_Base_SetConfig+0xe8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <TIM_Base_SetConfig+0x8a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a21      	ldr	r2, [pc, #132]	; (8002100 <TIM_Base_SetConfig+0xec>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00f      	beq.n	800209e <TIM_Base_SetConfig+0x8a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a20      	ldr	r2, [pc, #128]	; (8002104 <TIM_Base_SetConfig+0xf0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00b      	beq.n	800209e <TIM_Base_SetConfig+0x8a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a1f      	ldr	r2, [pc, #124]	; (8002108 <TIM_Base_SetConfig+0xf4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <TIM_Base_SetConfig+0x8a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a1e      	ldr	r2, [pc, #120]	; (800210c <TIM_Base_SetConfig+0xf8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d003      	beq.n	800209e <TIM_Base_SetConfig+0x8a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a1d      	ldr	r2, [pc, #116]	; (8002110 <TIM_Base_SetConfig+0xfc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d108      	bne.n	80020b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <TIM_Base_SetConfig+0xe4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d103      	bne.n	80020e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	615a      	str	r2, [r3, #20]
}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40010000 	.word	0x40010000
 80020fc:	40000400 	.word	0x40000400
 8002100:	40000800 	.word	0x40000800
 8002104:	40000c00 	.word	0x40000c00
 8002108:	40014000 	.word	0x40014000
 800210c:	40014400 	.word	0x40014400
 8002110:	40014800 	.word	0x40014800

08002114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	f023 0201 	bic.w	r2, r3, #1
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800213e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f023 030a 	bic.w	r3, r3, #10
 8002150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4313      	orrs	r3, r2
 8002158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	621a      	str	r2, [r3, #32]
}
 8002166:	bf00      	nop
 8002168:	371c      	adds	r7, #28
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002172:	b480      	push	{r7}
 8002174:	b087      	sub	sp, #28
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	f023 0210 	bic.w	r2, r3, #16
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800219c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	031b      	lsls	r3, r3, #12
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	621a      	str	r2, [r3, #32]
}
 80021c6:	bf00      	nop
 80021c8:	371c      	adds	r7, #28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f043 0307 	orr.w	r3, r3, #7
 80021f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	609a      	str	r2, [r3, #8]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	021a      	lsls	r2, r3, #8
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	431a      	orrs	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	4313      	orrs	r3, r2
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	4313      	orrs	r3, r2
 8002234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	609a      	str	r2, [r3, #8]
}
 800223c:	bf00      	nop
 800223e:	371c      	adds	r7, #28
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800225c:	2302      	movs	r3, #2
 800225e:	e050      	b.n	8002302 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1c      	ldr	r2, [pc, #112]	; (8002310 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d018      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ac:	d013      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a18      	ldr	r2, [pc, #96]	; (8002314 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00e      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a16      	ldr	r2, [pc, #88]	; (8002318 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d009      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a15      	ldr	r2, [pc, #84]	; (800231c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d004      	beq.n	80022d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a13      	ldr	r2, [pc, #76]	; (8002320 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d10c      	bne.n	80022f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40010000 	.word	0x40010000
 8002314:	40000400 	.word	0x40000400
 8002318:	40000800 	.word	0x40000800
 800231c:	40000c00 	.word	0x40000c00
 8002320:	40014000 	.word	0x40014000

08002324 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e03f      	b.n	80023de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f001 fa06 	bl	8003784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2224      	movs	r2, #36	; 0x24
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800238e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fd15 	bl	8002dc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	4613      	mov	r3, r2
 80023f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d130      	bne.n	8002462 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_UART_Transmit_IT+0x26>
 8002406:	88fb      	ldrh	r3, [r7, #6]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e029      	b.n	8002464 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_UART_Transmit_IT+0x38>
 800241a:	2302      	movs	r3, #2
 800241c:	e022      	b.n	8002464 <HAL_UART_Transmit_IT+0x7e>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	88fa      	ldrh	r2, [r7, #6]
 8002430:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2221      	movs	r2, #33	; 0x21
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800245c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	e000      	b.n	8002464 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002462:	2302      	movs	r3, #2
  }
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	4613      	mov	r3, r2
 800247c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b20      	cmp	r3, #32
 8002488:	d11d      	bne.n	80024c6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_UART_Receive_IT+0x26>
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e016      	b.n	80024c8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_UART_Receive_IT+0x38>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e00f      	b.n	80024c8 <HAL_UART_Receive_IT+0x58>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	461a      	mov	r2, r3
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 faab 	bl	8002a18 <UART_Start_Receive_IT>
 80024c2:	4603      	mov	r3, r0
 80024c4:	e000      	b.n	80024c8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80024c6:	2302      	movs	r3, #2
  }
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b0ba      	sub	sp, #232	; 0xe8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800250e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10f      	bne.n	8002536 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_UART_IRQHandler+0x66>
 8002522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fb8b 	bl	8002c4a <UART_Receive_IT>
      return;
 8002534:	e257      	b.n	80029e6 <HAL_UART_IRQHandler+0x516>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80de 	beq.w	80026fc <HAL_UART_IRQHandler+0x22c>
 8002540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d106      	bne.n	800255a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800254c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002550:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80d1 	beq.w	80026fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800255a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <HAL_UART_IRQHandler+0xae>
 8002566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800256a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800257e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00b      	beq.n	80025a2 <HAL_UART_IRQHandler+0xd2>
 800258a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f043 0202 	orr.w	r2, r3, #2
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_UART_IRQHandler+0xf6>
 80025ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f043 0204 	orr.w	r2, r3, #4
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d011      	beq.n	80025f6 <HAL_UART_IRQHandler+0x126>
 80025d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d105      	bne.n	80025ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f043 0208 	orr.w	r2, r3, #8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 81ee 	beq.w	80029dc <HAL_UART_IRQHandler+0x50c>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_UART_IRQHandler+0x14e>
 800260c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fb16 	bl	8002c4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002628:	2b40      	cmp	r3, #64	; 0x40
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d103      	bne.n	800264a <HAL_UART_IRQHandler+0x17a>
 8002642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002646:	2b00      	cmp	r3, #0
 8002648:	d04f      	beq.n	80026ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fa1e 	bl	8002a8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265a:	2b40      	cmp	r3, #64	; 0x40
 800265c:	d141      	bne.n	80026e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3314      	adds	r3, #20
 8002664:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002668:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800266c:	e853 3f00 	ldrex	r3, [r3]
 8002670:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002674:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800267c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3314      	adds	r3, #20
 8002686:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800268a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800268e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002692:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002696:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800269a:	e841 2300 	strex	r3, r2, [r1]
 800269e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80026a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1d9      	bne.n	800265e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d013      	beq.n	80026da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b6:	4a7d      	ldr	r2, [pc, #500]	; (80028ac <HAL_UART_IRQHandler+0x3dc>)
 80026b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe f9b4 	bl	8000a2c <HAL_DMA_Abort_IT>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d016      	beq.n	80026f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026d4:	4610      	mov	r0, r2
 80026d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d8:	e00e      	b.n	80026f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f986 	bl	80029ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e0:	e00a      	b.n	80026f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f982 	bl	80029ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e8:	e006      	b.n	80026f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f97e 	bl	80029ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80026f6:	e171      	b.n	80029dc <HAL_UART_IRQHandler+0x50c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f8:	bf00      	nop
    return;
 80026fa:	e16f      	b.n	80029dc <HAL_UART_IRQHandler+0x50c>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	2b01      	cmp	r3, #1
 8002702:	f040 814a 	bne.w	800299a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 8143 	beq.w	800299a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 813c 	beq.w	800299a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002742:	2b40      	cmp	r3, #64	; 0x40
 8002744:	f040 80b4 	bne.w	80028b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002754:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 8141 	beq.w	80029e0 <HAL_UART_IRQHandler+0x510>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002766:	429a      	cmp	r2, r3
 8002768:	f080 813a 	bcs.w	80029e0 <HAL_UART_IRQHandler+0x510>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002772:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800277e:	f000 8088 	beq.w	8002892 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	330c      	adds	r3, #12
 8002788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002790:	e853 3f00 	ldrex	r3, [r3]
 8002794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002798:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800279c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	330c      	adds	r3, #12
 80027aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027be:	e841 2300 	strex	r3, r2, [r1]
 80027c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1d9      	bne.n	8002782 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3314      	adds	r3, #20
 80027d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d8:	e853 3f00 	ldrex	r3, [r3]
 80027dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3314      	adds	r3, #20
 80027ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027fe:	e841 2300 	strex	r3, r2, [r1]
 8002802:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e1      	bne.n	80027ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	3314      	adds	r3, #20
 8002810:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002814:	e853 3f00 	ldrex	r3, [r3]
 8002818:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800281a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800281c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3314      	adds	r3, #20
 800282a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800282e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002830:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002832:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002834:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002836:	e841 2300 	strex	r3, r2, [r1]
 800283a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800283c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1e3      	bne.n	800280a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	330c      	adds	r3, #12
 8002856:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800285a:	e853 3f00 	ldrex	r3, [r3]
 800285e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002862:	f023 0310 	bic.w	r3, r3, #16
 8002866:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	330c      	adds	r3, #12
 8002870:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002874:	65ba      	str	r2, [r7, #88]	; 0x58
 8002876:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002878:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800287a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800287c:	e841 2300 	strex	r3, r2, [r1]
 8002880:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e3      	bne.n	8002850 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe f85d 	bl	800094c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800289a:	b29b      	uxth	r3, r3
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	b29b      	uxth	r3, r3
 80028a0:	4619      	mov	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f8ac 	bl	8002a00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028a8:	e09a      	b.n	80029e0 <HAL_UART_IRQHandler+0x510>
 80028aa:	bf00      	nop
 80028ac:	08002b53 	.word	0x08002b53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 808c 	beq.w	80029e4 <HAL_UART_IRQHandler+0x514>
          && (nb_rx_data > 0U))
 80028cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 8087 	beq.w	80029e4 <HAL_UART_IRQHandler+0x514>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	330c      	adds	r3, #12
 80028dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e0:	e853 3f00 	ldrex	r3, [r3]
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028fa:	647a      	str	r2, [r7, #68]	; 0x44
 80028fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002900:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002902:	e841 2300 	strex	r3, r2, [r1]
 8002906:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1e3      	bne.n	80028d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	3314      	adds	r3, #20
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	e853 3f00 	ldrex	r3, [r3]
 800291c:	623b      	str	r3, [r7, #32]
   return(result);
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	f023 0301 	bic.w	r3, r3, #1
 8002924:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3314      	adds	r3, #20
 800292e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002932:	633a      	str	r2, [r7, #48]	; 0x30
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002936:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800293a:	e841 2300 	strex	r3, r2, [r1]
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1e3      	bne.n	800290e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	330c      	adds	r3, #12
 800295a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	e853 3f00 	ldrex	r3, [r3]
 8002962:	60fb      	str	r3, [r7, #12]
   return(result);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0310 	bic.w	r3, r3, #16
 800296a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	330c      	adds	r3, #12
 8002974:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002978:	61fa      	str	r2, [r7, #28]
 800297a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297c:	69b9      	ldr	r1, [r7, #24]
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	e841 2300 	strex	r3, r2, [r1]
 8002984:	617b      	str	r3, [r7, #20]
   return(result);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e3      	bne.n	8002954 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800298c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002990:	4619      	mov	r1, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f834 	bl	8002a00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002998:	e024      	b.n	80029e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800299a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_UART_IRQHandler+0x4ea>
 80029a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8e1 	bl	8002b7a <UART_Transmit_IT>
    return;
 80029b8:	e015      	b.n	80029e6 <HAL_UART_IRQHandler+0x516>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00f      	beq.n	80029e6 <HAL_UART_IRQHandler+0x516>
 80029c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_UART_IRQHandler+0x516>
  {
    UART_EndTransmit_IT(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f921 	bl	8002c1a <UART_EndTransmit_IT>
    return;
 80029d8:	bf00      	nop
 80029da:	e004      	b.n	80029e6 <HAL_UART_IRQHandler+0x516>
    return;
 80029dc:	bf00      	nop
 80029de:	e002      	b.n	80029e6 <HAL_UART_IRQHandler+0x516>
      return;
 80029e0:	bf00      	nop
 80029e2:	e000      	b.n	80029e6 <HAL_UART_IRQHandler+0x516>
      return;
 80029e4:	bf00      	nop
  }
}
 80029e6:	37e8      	adds	r7, #232	; 0xe8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	4613      	mov	r3, r2
 8002a24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	88fa      	ldrh	r2, [r7, #6]
 8002a30:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	88fa      	ldrh	r2, [r7, #6]
 8002a36:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2222      	movs	r2, #34	; 0x22
 8002a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a5c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0201 	orr.w	r2, r2, #1
 8002a6c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0220 	orr.w	r2, r2, #32
 8002a7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b095      	sub	sp, #84	; 0x54
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	330c      	adds	r3, #12
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9e:	e853 3f00 	ldrex	r3, [r3]
 8002aa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	330c      	adds	r3, #12
 8002ab2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ab4:	643a      	str	r2, [r7, #64]	; 0x40
 8002ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002aba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002abc:	e841 2300 	strex	r3, r2, [r1]
 8002ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1e5      	bne.n	8002a94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	3314      	adds	r3, #20
 8002ace:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	e853 3f00 	ldrex	r3, [r3]
 8002ad6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	3314      	adds	r3, #20
 8002ae6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ae8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af0:	e841 2300 	strex	r3, r2, [r1]
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1e5      	bne.n	8002ac8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d119      	bne.n	8002b38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	330c      	adds	r3, #12
 8002b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	e853 3f00 	ldrex	r3, [r3]
 8002b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f023 0310 	bic.w	r3, r3, #16
 8002b1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	330c      	adds	r3, #12
 8002b22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b24:	61ba      	str	r2, [r7, #24]
 8002b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b28:	6979      	ldr	r1, [r7, #20]
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	e841 2300 	strex	r3, r2, [r1]
 8002b30:	613b      	str	r3, [r7, #16]
   return(result);
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e5      	bne.n	8002b04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b46:	bf00      	nop
 8002b48:	3754      	adds	r7, #84	; 0x54
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f7ff ff3d 	bl	80029ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b21      	cmp	r3, #33	; 0x21
 8002b8c:	d13e      	bne.n	8002c0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b96:	d114      	bne.n	8002bc2 <UART_Transmit_IT+0x48>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d110      	bne.n	8002bc2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	1c9a      	adds	r2, r3, #2
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	621a      	str	r2, [r3, #32]
 8002bc0:	e008      	b.n	8002bd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	1c59      	adds	r1, r3, #1
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6211      	str	r1, [r2, #32]
 8002bcc:	781a      	ldrb	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	4619      	mov	r1, r3
 8002be2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10f      	bne.n	8002c08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e000      	b.n	8002c0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
  }
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fb0e 	bl	800325c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b08c      	sub	sp, #48	; 0x30
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b22      	cmp	r3, #34	; 0x22
 8002c5c:	f040 80ab 	bne.w	8002db6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c68:	d117      	bne.n	8002c9a <UART_Receive_IT+0x50>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d113      	bne.n	8002c9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	1c9a      	adds	r2, r3, #2
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
 8002c98:	e026      	b.n	8002ce8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cac:	d007      	beq.n	8002cbe <UART_Receive_IT+0x74>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <UART_Receive_IT+0x82>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	701a      	strb	r2, [r3, #0]
 8002cca:	e008      	b.n	8002cde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d15a      	bne.n	8002db2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0220 	bic.w	r2, r2, #32
 8002d0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0201 	bic.w	r2, r2, #1
 8002d2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d135      	bne.n	8002da8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	330c      	adds	r3, #12
 8002d48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	e853 3f00 	ldrex	r3, [r3]
 8002d50:	613b      	str	r3, [r7, #16]
   return(result);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f023 0310 	bic.w	r3, r3, #16
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	330c      	adds	r3, #12
 8002d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d62:	623a      	str	r2, [r7, #32]
 8002d64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d66:	69f9      	ldr	r1, [r7, #28]
 8002d68:	6a3a      	ldr	r2, [r7, #32]
 8002d6a:	e841 2300 	strex	r3, r2, [r1]
 8002d6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1e5      	bne.n	8002d42 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d10a      	bne.n	8002d9a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff fe2d 	bl	8002a00 <HAL_UARTEx_RxEventCallback>
 8002da6:	e002      	b.n	8002dae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fa89 	bl	80032c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	e002      	b.n	8002db8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e000      	b.n	8002db8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002db6:	2302      	movs	r3, #2
  }
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3730      	adds	r7, #48	; 0x30
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dc4:	b085      	sub	sp, #20
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e02:	f023 030c 	bic.w	r3, r3, #12
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4ad0      	ldr	r2, [pc, #832]	; (800316c <UART_SetConfig+0x3ac>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <UART_SetConfig+0x7a>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4ace      	ldr	r2, [pc, #824]	; (8003170 <UART_SetConfig+0x3b0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d103      	bne.n	8002e42 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e3a:	f7fe fe39 	bl	8001ab0 <HAL_RCC_GetPCLK2Freq>
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	e002      	b.n	8002e48 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e42:	f7fe fe21 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002e46:	60f8      	str	r0, [r7, #12]
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e50:	f040 80ba 	bne.w	8002fc8 <UART_SetConfig+0x208>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	461d      	mov	r5, r3
 8002e58:	f04f 0600 	mov.w	r6, #0
 8002e5c:	46a8      	mov	r8, r5
 8002e5e:	46b1      	mov	r9, r6
 8002e60:	eb18 0308 	adds.w	r3, r8, r8
 8002e64:	eb49 0409 	adc.w	r4, r9, r9
 8002e68:	4698      	mov	r8, r3
 8002e6a:	46a1      	mov	r9, r4
 8002e6c:	eb18 0805 	adds.w	r8, r8, r5
 8002e70:	eb49 0906 	adc.w	r9, r9, r6
 8002e74:	f04f 0100 	mov.w	r1, #0
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e88:	4688      	mov	r8, r1
 8002e8a:	4691      	mov	r9, r2
 8002e8c:	eb18 0005 	adds.w	r0, r8, r5
 8002e90:	eb49 0106 	adc.w	r1, r9, r6
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	461d      	mov	r5, r3
 8002e9a:	f04f 0600 	mov.w	r6, #0
 8002e9e:	196b      	adds	r3, r5, r5
 8002ea0:	eb46 0406 	adc.w	r4, r6, r6
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4623      	mov	r3, r4
 8002ea8:	f7fd f99e 	bl	80001e8 <__aeabi_uldivmod>
 8002eac:	4603      	mov	r3, r0
 8002eae:	460c      	mov	r4, r1
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4bb0      	ldr	r3, [pc, #704]	; (8003174 <UART_SetConfig+0x3b4>)
 8002eb4:	fba3 2302 	umull	r2, r3, r3, r2
 8002eb8:	095b      	lsrs	r3, r3, #5
 8002eba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	461d      	mov	r5, r3
 8002ec2:	f04f 0600 	mov.w	r6, #0
 8002ec6:	46a9      	mov	r9, r5
 8002ec8:	46b2      	mov	sl, r6
 8002eca:	eb19 0309 	adds.w	r3, r9, r9
 8002ece:	eb4a 040a 	adc.w	r4, sl, sl
 8002ed2:	4699      	mov	r9, r3
 8002ed4:	46a2      	mov	sl, r4
 8002ed6:	eb19 0905 	adds.w	r9, r9, r5
 8002eda:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002eee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ef2:	4689      	mov	r9, r1
 8002ef4:	4692      	mov	sl, r2
 8002ef6:	eb19 0005 	adds.w	r0, r9, r5
 8002efa:	eb4a 0106 	adc.w	r1, sl, r6
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	461d      	mov	r5, r3
 8002f04:	f04f 0600 	mov.w	r6, #0
 8002f08:	196b      	adds	r3, r5, r5
 8002f0a:	eb46 0406 	adc.w	r4, r6, r6
 8002f0e:	461a      	mov	r2, r3
 8002f10:	4623      	mov	r3, r4
 8002f12:	f7fd f969 	bl	80001e8 <__aeabi_uldivmod>
 8002f16:	4603      	mov	r3, r0
 8002f18:	460c      	mov	r4, r1
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4b95      	ldr	r3, [pc, #596]	; (8003174 <UART_SetConfig+0x3b4>)
 8002f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	2164      	movs	r1, #100	; 0x64
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	3332      	adds	r3, #50	; 0x32
 8002f30:	4a90      	ldr	r2, [pc, #576]	; (8003174 <UART_SetConfig+0x3b4>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f3e:	4498      	add	r8, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	461d      	mov	r5, r3
 8002f44:	f04f 0600 	mov.w	r6, #0
 8002f48:	46a9      	mov	r9, r5
 8002f4a:	46b2      	mov	sl, r6
 8002f4c:	eb19 0309 	adds.w	r3, r9, r9
 8002f50:	eb4a 040a 	adc.w	r4, sl, sl
 8002f54:	4699      	mov	r9, r3
 8002f56:	46a2      	mov	sl, r4
 8002f58:	eb19 0905 	adds.w	r9, r9, r5
 8002f5c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f60:	f04f 0100 	mov.w	r1, #0
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f74:	4689      	mov	r9, r1
 8002f76:	4692      	mov	sl, r2
 8002f78:	eb19 0005 	adds.w	r0, r9, r5
 8002f7c:	eb4a 0106 	adc.w	r1, sl, r6
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	461d      	mov	r5, r3
 8002f86:	f04f 0600 	mov.w	r6, #0
 8002f8a:	196b      	adds	r3, r5, r5
 8002f8c:	eb46 0406 	adc.w	r4, r6, r6
 8002f90:	461a      	mov	r2, r3
 8002f92:	4623      	mov	r3, r4
 8002f94:	f7fd f928 	bl	80001e8 <__aeabi_uldivmod>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	460c      	mov	r4, r1
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b75      	ldr	r3, [pc, #468]	; (8003174 <UART_SetConfig+0x3b4>)
 8002fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	2164      	movs	r1, #100	; 0x64
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	3332      	adds	r3, #50	; 0x32
 8002fb2:	4a70      	ldr	r2, [pc, #448]	; (8003174 <UART_SetConfig+0x3b4>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	f003 0207 	and.w	r2, r3, #7
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4442      	add	r2, r8
 8002fc4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fc6:	e0cc      	b.n	8003162 <UART_SetConfig+0x3a2>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	469a      	mov	sl, r3
 8002fcc:	f04f 0b00 	mov.w	fp, #0
 8002fd0:	46d0      	mov	r8, sl
 8002fd2:	46d9      	mov	r9, fp
 8002fd4:	eb18 0308 	adds.w	r3, r8, r8
 8002fd8:	eb49 0409 	adc.w	r4, r9, r9
 8002fdc:	4698      	mov	r8, r3
 8002fde:	46a1      	mov	r9, r4
 8002fe0:	eb18 080a 	adds.w	r8, r8, sl
 8002fe4:	eb49 090b 	adc.w	r9, r9, fp
 8002fe8:	f04f 0100 	mov.w	r1, #0
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ff4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ff8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ffc:	4688      	mov	r8, r1
 8002ffe:	4691      	mov	r9, r2
 8003000:	eb1a 0508 	adds.w	r5, sl, r8
 8003004:	eb4b 0609 	adc.w	r6, fp, r9
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4619      	mov	r1, r3
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	f04f 0400 	mov.w	r4, #0
 800301a:	0094      	lsls	r4, r2, #2
 800301c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003020:	008b      	lsls	r3, r1, #2
 8003022:	461a      	mov	r2, r3
 8003024:	4623      	mov	r3, r4
 8003026:	4628      	mov	r0, r5
 8003028:	4631      	mov	r1, r6
 800302a:	f7fd f8dd 	bl	80001e8 <__aeabi_uldivmod>
 800302e:	4603      	mov	r3, r0
 8003030:	460c      	mov	r4, r1
 8003032:	461a      	mov	r2, r3
 8003034:	4b4f      	ldr	r3, [pc, #316]	; (8003174 <UART_SetConfig+0x3b4>)
 8003036:	fba3 2302 	umull	r2, r3, r3, r2
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	469b      	mov	fp, r3
 8003044:	f04f 0c00 	mov.w	ip, #0
 8003048:	46d9      	mov	r9, fp
 800304a:	46e2      	mov	sl, ip
 800304c:	eb19 0309 	adds.w	r3, r9, r9
 8003050:	eb4a 040a 	adc.w	r4, sl, sl
 8003054:	4699      	mov	r9, r3
 8003056:	46a2      	mov	sl, r4
 8003058:	eb19 090b 	adds.w	r9, r9, fp
 800305c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003060:	f04f 0100 	mov.w	r1, #0
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800306c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003070:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003074:	4689      	mov	r9, r1
 8003076:	4692      	mov	sl, r2
 8003078:	eb1b 0509 	adds.w	r5, fp, r9
 800307c:	eb4c 060a 	adc.w	r6, ip, sl
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4619      	mov	r1, r3
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	f04f 0400 	mov.w	r4, #0
 8003092:	0094      	lsls	r4, r2, #2
 8003094:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003098:	008b      	lsls	r3, r1, #2
 800309a:	461a      	mov	r2, r3
 800309c:	4623      	mov	r3, r4
 800309e:	4628      	mov	r0, r5
 80030a0:	4631      	mov	r1, r6
 80030a2:	f7fd f8a1 	bl	80001e8 <__aeabi_uldivmod>
 80030a6:	4603      	mov	r3, r0
 80030a8:	460c      	mov	r4, r1
 80030aa:	461a      	mov	r2, r3
 80030ac:	4b31      	ldr	r3, [pc, #196]	; (8003174 <UART_SetConfig+0x3b4>)
 80030ae:	fba3 1302 	umull	r1, r3, r3, r2
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	2164      	movs	r1, #100	; 0x64
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	3332      	adds	r3, #50	; 0x32
 80030c0:	4a2c      	ldr	r2, [pc, #176]	; (8003174 <UART_SetConfig+0x3b4>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030cc:	4498      	add	r8, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	469b      	mov	fp, r3
 80030d2:	f04f 0c00 	mov.w	ip, #0
 80030d6:	46d9      	mov	r9, fp
 80030d8:	46e2      	mov	sl, ip
 80030da:	eb19 0309 	adds.w	r3, r9, r9
 80030de:	eb4a 040a 	adc.w	r4, sl, sl
 80030e2:	4699      	mov	r9, r3
 80030e4:	46a2      	mov	sl, r4
 80030e6:	eb19 090b 	adds.w	r9, r9, fp
 80030ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030ee:	f04f 0100 	mov.w	r1, #0
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003102:	4689      	mov	r9, r1
 8003104:	4692      	mov	sl, r2
 8003106:	eb1b 0509 	adds.w	r5, fp, r9
 800310a:	eb4c 060a 	adc.w	r6, ip, sl
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	4619      	mov	r1, r3
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	f04f 0400 	mov.w	r4, #0
 8003120:	0094      	lsls	r4, r2, #2
 8003122:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003126:	008b      	lsls	r3, r1, #2
 8003128:	461a      	mov	r2, r3
 800312a:	4623      	mov	r3, r4
 800312c:	4628      	mov	r0, r5
 800312e:	4631      	mov	r1, r6
 8003130:	f7fd f85a 	bl	80001e8 <__aeabi_uldivmod>
 8003134:	4603      	mov	r3, r0
 8003136:	460c      	mov	r4, r1
 8003138:	461a      	mov	r2, r3
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <UART_SetConfig+0x3b4>)
 800313c:	fba3 1302 	umull	r1, r3, r3, r2
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	2164      	movs	r1, #100	; 0x64
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	3332      	adds	r3, #50	; 0x32
 800314e:	4a09      	ldr	r2, [pc, #36]	; (8003174 <UART_SetConfig+0x3b4>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	f003 020f 	and.w	r2, r3, #15
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4442      	add	r2, r8
 8003160:	609a      	str	r2, [r3, #8]
}
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800316c:	40011000 	.word	0x40011000
 8003170:	40011400 	.word	0x40011400
 8003174:	51eb851f 	.word	0x51eb851f

08003178 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <MX_DMA_Init+0x3c>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	4a0b      	ldr	r2, [pc, #44]	; (80031b4 <MX_DMA_Init+0x3c>)
 8003188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800318c:	6313      	str	r3, [r2, #48]	; 0x30
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <MX_DMA_Init+0x3c>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2100      	movs	r1, #0
 800319e:	2011      	movs	r0, #17
 80031a0:	f7fd faef 	bl	8000782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80031a4:	2011      	movs	r0, #17
 80031a6:	f7fd fb08 	bl	80007ba <HAL_NVIC_EnableIRQ>

}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800

080031b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031be:	f107 030c 	add.w	r3, r7, #12
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	605a      	str	r2, [r3, #4]
 80031c8:	609a      	str	r2, [r3, #8]
 80031ca:	60da      	str	r2, [r3, #12]
 80031cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	4b20      	ldr	r3, [pc, #128]	; (8003254 <MX_GPIO_Init+0x9c>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <MX_GPIO_Init+0x9c>)
 80031d8:	f043 0304 	orr.w	r3, r3, #4
 80031dc:	6313      	str	r3, [r2, #48]	; 0x30
 80031de:	4b1d      	ldr	r3, [pc, #116]	; (8003254 <MX_GPIO_Init+0x9c>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	4b19      	ldr	r3, [pc, #100]	; (8003254 <MX_GPIO_Init+0x9c>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4a18      	ldr	r2, [pc, #96]	; (8003254 <MX_GPIO_Init+0x9c>)
 80031f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f8:	6313      	str	r3, [r2, #48]	; 0x30
 80031fa:	4b16      	ldr	r3, [pc, #88]	; (8003254 <MX_GPIO_Init+0x9c>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4b12      	ldr	r3, [pc, #72]	; (8003254 <MX_GPIO_Init+0x9c>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a11      	ldr	r2, [pc, #68]	; (8003254 <MX_GPIO_Init+0x9c>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <MX_GPIO_Init+0x9c>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8003222:	2200      	movs	r2, #0
 8003224:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003228:	480b      	ldr	r0, [pc, #44]	; (8003258 <MX_GPIO_Init+0xa0>)
 800322a:	f7fd ffdd 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_Pin;
 800322e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003234:	2301      	movs	r3, #1
 8003236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323c:	2300      	movs	r3, #0
 800323e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8003240:	f107 030c 	add.w	r3, r7, #12
 8003244:	4619      	mov	r1, r3
 8003246:	4804      	ldr	r0, [pc, #16]	; (8003258 <MX_GPIO_Init+0xa0>)
 8003248:	f7fd fe4c 	bl	8000ee4 <HAL_GPIO_Init>

}
 800324c:	bf00      	nop
 800324e:	3720      	adds	r7, #32
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40023800 	.word	0x40023800
 8003258:	40020800 	.word	0x40020800

0800325c <HAL_UART_TxCpltCallback>:
static int rx_uart2 = 0;

float data_terima = 0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
//		memcpy(data_kirim_usart2 + 5, &angka_kirim2, 2);
//		memcpy(data_kirim_usart2 + 7, &angka_kirim3, 4);
//		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) data_kirim_usart2, strlen(data_kirim_usart2));

		// using interrupt
		HAL_UART_Transmit_IT(&huart6, data_kirim_usart6, strlen(data_kirim_usart6));
 8003264:	4811      	ldr	r0, [pc, #68]	; (80032ac <HAL_UART_TxCpltCallback+0x50>)
 8003266:	f7fc ffb7 	bl	80001d8 <strlen>
 800326a:	4603      	mov	r3, r0
 800326c:	b29b      	uxth	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	490e      	ldr	r1, [pc, #56]	; (80032ac <HAL_UART_TxCpltCallback+0x50>)
 8003272:	480f      	ldr	r0, [pc, #60]	; (80032b0 <HAL_UART_TxCpltCallback+0x54>)
 8003274:	f7ff f8b7 	bl	80023e6 <HAL_UART_Transmit_IT>

		if (rx_uart1 > 100)
 8003278:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <HAL_UART_TxCpltCallback+0x58>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b64      	cmp	r3, #100	; 0x64
 800327e:	dd07      	ble.n	8003290 <HAL_UART_TxCpltCallback+0x34>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003284:	480c      	ldr	r0, [pc, #48]	; (80032b8 <HAL_UART_TxCpltCallback+0x5c>)
 8003286:	f7fd ffc8 	bl	800121a <HAL_GPIO_TogglePin>
			rx_uart1 = 0;
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <HAL_UART_TxCpltCallback+0x58>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
		}
		rx_uart1++;
 8003290:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <HAL_UART_TxCpltCallback+0x58>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3301      	adds	r3, #1
 8003296:	4a07      	ldr	r2, [pc, #28]	; (80032b4 <HAL_UART_TxCpltCallback+0x58>)
 8003298:	6013      	str	r3, [r2, #0]
		counter_usart++;
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <HAL_UART_TxCpltCallback+0x60>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3301      	adds	r3, #1
 80032a0:	4a06      	ldr	r2, [pc, #24]	; (80032bc <HAL_UART_TxCpltCallback+0x60>)
 80032a2:	6013      	str	r3, [r2, #0]

//	}
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000008 	.word	0x20000008
 80032b0:	2000013c 	.word	0x2000013c
 80032b4:	20000034 	.word	0x20000034
 80032b8:	40020800 	.word	0x40020800
 80032bc:	20000030 	.word	0x20000030

080032c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
//	if(huart->Instance == USART2)
//	{
		if (rx_uart2 > 100)
 80032c8:	4b11      	ldr	r3, [pc, #68]	; (8003310 <HAL_UART_RxCpltCallback+0x50>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b64      	cmp	r3, #100	; 0x64
 80032ce:	dd07      	ble.n	80032e0 <HAL_UART_RxCpltCallback+0x20>
		{
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80032d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032d4:	480f      	ldr	r0, [pc, #60]	; (8003314 <HAL_UART_RxCpltCallback+0x54>)
 80032d6:	f7fd ffa0 	bl	800121a <HAL_GPIO_TogglePin>
			rx_uart2 = 0;
 80032da:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <HAL_UART_RxCpltCallback+0x50>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
		}
		rx_uart2++;
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_UART_RxCpltCallback+0x50>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3301      	adds	r3, #1
 80032e6:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <HAL_UART_RxCpltCallback+0x50>)
 80032e8:	6013      	str	r3, [r2, #0]


		// using interrupt
		memcpy(&data_terima, data_terima_usart6, 4);
 80032ea:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_UART_RxCpltCallback+0x58>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <HAL_UART_RxCpltCallback+0x5c>)
 80032f2:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart6, data_terima_usart6, strlen(data_terima_usart6));
 80032f4:	4808      	ldr	r0, [pc, #32]	; (8003318 <HAL_UART_RxCpltCallback+0x58>)
 80032f6:	f7fc ff6f 	bl	80001d8 <strlen>
 80032fa:	4603      	mov	r3, r0
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	4905      	ldr	r1, [pc, #20]	; (8003318 <HAL_UART_RxCpltCallback+0x58>)
 8003302:	4807      	ldr	r0, [pc, #28]	; (8003320 <HAL_UART_RxCpltCallback+0x60>)
 8003304:	f7ff f8b4 	bl	8002470 <HAL_UART_Receive_IT>
		// using dma
//		memcpy(&data_terima, data_terima_usart2, 4);
//		HAL_UART_Receive_DMA(&huart2, (uint8_t*)data_terima_usart2, strlen(data_terima_usart2));

//	}
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20000038 	.word	0x20000038
 8003314:	40020c00 	.word	0x40020c00
 8003318:	2000004c 	.word	0x2000004c
 800331c:	2000003c 	.word	0x2000003c
 8003320:	2000013c 	.word	0x2000013c

08003324 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003334:	d104      	bne.n	8003340 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		counter++;
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3301      	adds	r3, #1
 800333c:	4a03      	ldr	r2, [pc, #12]	; (800334c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800333e:	6013      	str	r3, [r2, #0]
	}
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	2000002c 	.word	0x2000002c

08003350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003354:	f7fd f8c8 	bl	80004e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003358:	f000 f820 	bl	800339c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800335c:	f7ff ff2c 	bl	80031b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003360:	f000 f992 	bl	8003688 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8003364:	f000 f91c 	bl	80035a0 <MX_TIM2_Init>
  MX_DMA_Init();
 8003368:	f7ff ff06 	bl	8003178 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800336c:	f000 f9b6 	bl	80036dc <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8003370:	f000 f9de 	bl	8003730 <MX_USART6_UART_Init>
  // usart using dma
//    HAL_UART_Transmit_DMA(&huart2, (uint8_t*) data_kirim_usart2, strlen(data_kirim_usart2));
//    HAL_UART_Receive_DMA(&huart2, (uint8_t*) data_terima_usart2, strlen(data_terima_usart2));

  // usart using interrupt
  HAL_UART_Receive_IT(&huart6, data_terima_usart6, strlen(data_terima_usart6));
 8003374:	4806      	ldr	r0, [pc, #24]	; (8003390 <main+0x40>)
 8003376:	f7fc ff2f 	bl	80001d8 <strlen>
 800337a:	4603      	mov	r3, r0
 800337c:	b29b      	uxth	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	4903      	ldr	r1, [pc, #12]	; (8003390 <main+0x40>)
 8003382:	4804      	ldr	r0, [pc, #16]	; (8003394 <main+0x44>)
 8003384:	f7ff f874 	bl	8002470 <HAL_UART_Receive_IT>
//  HAL_UART_Transmit_IT(&huart6, data_kirim_usart6, strlen(data_kirim_usart6));

  // interrupt
  HAL_TIM_Base_Start_IT(&htim2);
 8003388:	4803      	ldr	r0, [pc, #12]	; (8003398 <main+0x48>)
 800338a:	f7fe fbf5 	bl	8001b78 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800338e:	e7fe      	b.n	800338e <main+0x3e>
 8003390:	2000004c 	.word	0x2000004c
 8003394:	2000013c 	.word	0x2000013c
 8003398:	20000050 	.word	0x20000050

0800339c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b094      	sub	sp, #80	; 0x50
 80033a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033a2:	f107 0320 	add.w	r3, r7, #32
 80033a6:	2230      	movs	r2, #48	; 0x30
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fb34 	bl	8003a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033b0:	f107 030c 	add.w	r3, r7, #12
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033c0:	2300      	movs	r3, #0
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	4b27      	ldr	r3, [pc, #156]	; (8003464 <SystemClock_Config+0xc8>)
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	4a26      	ldr	r2, [pc, #152]	; (8003464 <SystemClock_Config+0xc8>)
 80033ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ce:	6413      	str	r3, [r2, #64]	; 0x40
 80033d0:	4b24      	ldr	r3, [pc, #144]	; (8003464 <SystemClock_Config+0xc8>)
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033dc:	2300      	movs	r3, #0
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	4b21      	ldr	r3, [pc, #132]	; (8003468 <SystemClock_Config+0xcc>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a20      	ldr	r2, [pc, #128]	; (8003468 <SystemClock_Config+0xcc>)
 80033e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <SystemClock_Config+0xcc>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033f8:	2301      	movs	r3, #1
 80033fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003402:	2302      	movs	r3, #2
 8003404:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003406:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800340a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800340c:	230c      	movs	r3, #12
 800340e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003410:	2360      	movs	r3, #96	; 0x60
 8003412:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003414:	2302      	movs	r3, #2
 8003416:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003418:	2304      	movs	r3, #4
 800341a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800341c:	f107 0320 	add.w	r3, r7, #32
 8003420:	4618      	mov	r0, r3
 8003422:	f7fd ff15 	bl	8001250 <HAL_RCC_OscConfig>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800342c:	f000 f81e 	bl	800346c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003430:	230f      	movs	r3, #15
 8003432:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003434:	2302      	movs	r3, #2
 8003436:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800343c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003440:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003446:	f107 030c 	add.w	r3, r7, #12
 800344a:	2103      	movs	r1, #3
 800344c:	4618      	mov	r0, r3
 800344e:	f7fe f977 	bl	8001740 <HAL_RCC_ClockConfig>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003458:	f000 f808 	bl	800346c <Error_Handler>
  }
}
 800345c:	bf00      	nop
 800345e:	3750      	adds	r7, #80	; 0x50
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40023800 	.word	0x40023800
 8003468:	40007000 	.word	0x40007000

0800346c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003470:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003472:	e7fe      	b.n	8003472 <Error_Handler+0x6>

08003474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <HAL_MspInit+0x4c>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	4a0f      	ldr	r2, [pc, #60]	; (80034c0 <HAL_MspInit+0x4c>)
 8003484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003488:	6453      	str	r3, [r2, #68]	; 0x44
 800348a:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <HAL_MspInit+0x4c>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003492:	607b      	str	r3, [r7, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	603b      	str	r3, [r7, #0]
 800349a:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <HAL_MspInit+0x4c>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	4a08      	ldr	r2, [pc, #32]	; (80034c0 <HAL_MspInit+0x4c>)
 80034a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a4:	6413      	str	r3, [r2, #64]	; 0x40
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <HAL_MspInit+0x4c>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800

080034c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034c8:	e7fe      	b.n	80034c8 <NMI_Handler+0x4>

080034ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ca:	b480      	push	{r7}
 80034cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034ce:	e7fe      	b.n	80034ce <HardFault_Handler+0x4>

080034d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034d4:	e7fe      	b.n	80034d4 <MemManage_Handler+0x4>

080034d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034d6:	b480      	push	{r7}
 80034d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034da:	e7fe      	b.n	80034da <BusFault_Handler+0x4>

080034dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034e0:	e7fe      	b.n	80034e0 <UsageFault_Handler+0x4>

080034e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034e2:	b480      	push	{r7}
 80034e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003510:	f7fd f83c 	bl	800058c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003514:	bf00      	nop
 8003516:	bd80      	pop	{r7, pc}

08003518 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800351c:	4802      	ldr	r0, [pc, #8]	; (8003528 <DMA1_Stream6_IRQHandler+0x10>)
 800351e:	f7fd faa7 	bl	8000a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000098 	.word	0x20000098

0800352c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003530:	4802      	ldr	r0, [pc, #8]	; (800353c <TIM2_IRQHandler+0x10>)
 8003532:	f7fe fb83 	bl	8001c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000050 	.word	0x20000050

08003540 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003544:	4802      	ldr	r0, [pc, #8]	; (8003550 <USART1_IRQHandler+0x10>)
 8003546:	f7fe ffc3 	bl	80024d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200000f8 	.word	0x200000f8

08003554 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003558:	4802      	ldr	r0, [pc, #8]	; (8003564 <USART2_IRQHandler+0x10>)
 800355a:	f7fe ffb9 	bl	80024d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000180 	.word	0x20000180

08003568 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800356c:	4802      	ldr	r0, [pc, #8]	; (8003578 <USART6_IRQHandler+0x10>)
 800356e:	f7fe ffaf 	bl	80024d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	2000013c 	.word	0x2000013c

0800357c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003580:	4b06      	ldr	r3, [pc, #24]	; (800359c <SystemInit+0x20>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	4a05      	ldr	r2, [pc, #20]	; (800359c <SystemInit+0x20>)
 8003588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800358c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035a6:	f107 0308 	add.w	r3, r7, #8
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	609a      	str	r2, [r3, #8]
 80035b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035b4:	463b      	mov	r3, r7
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035bc:	4b1e      	ldr	r3, [pc, #120]	; (8003638 <MX_TIM2_Init+0x98>)
 80035be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 65535;
 80035c4:	4b1c      	ldr	r3, [pc, #112]	; (8003638 <MX_TIM2_Init+0x98>)
 80035c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035cc:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <MX_TIM2_Init+0x98>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80035d2:	4b19      	ldr	r3, [pc, #100]	; (8003638 <MX_TIM2_Init+0x98>)
 80035d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035da:	4b17      	ldr	r3, [pc, #92]	; (8003638 <MX_TIM2_Init+0x98>)
 80035dc:	2200      	movs	r2, #0
 80035de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035e0:	4b15      	ldr	r3, [pc, #84]	; (8003638 <MX_TIM2_Init+0x98>)
 80035e2:	2280      	movs	r2, #128	; 0x80
 80035e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80035e6:	4814      	ldr	r0, [pc, #80]	; (8003638 <MX_TIM2_Init+0x98>)
 80035e8:	f7fe fa76 	bl	8001ad8 <HAL_TIM_Base_Init>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80035f2:	f7ff ff3b 	bl	800346c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80035fc:	f107 0308 	add.w	r3, r7, #8
 8003600:	4619      	mov	r1, r3
 8003602:	480d      	ldr	r0, [pc, #52]	; (8003638 <MX_TIM2_Init+0x98>)
 8003604:	f7fe fc22 	bl	8001e4c <HAL_TIM_ConfigClockSource>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800360e:	f7ff ff2d 	bl	800346c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003612:	2300      	movs	r3, #0
 8003614:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003616:	2300      	movs	r3, #0
 8003618:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800361a:	463b      	mov	r3, r7
 800361c:	4619      	mov	r1, r3
 800361e:	4806      	ldr	r0, [pc, #24]	; (8003638 <MX_TIM2_Init+0x98>)
 8003620:	f7fe fe12 	bl	8002248 <HAL_TIMEx_MasterConfigSynchronization>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800362a:	f7ff ff1f 	bl	800346c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800362e:	bf00      	nop
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000050 	.word	0x20000050

0800363c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364c:	d115      	bne.n	800367a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <HAL_TIM_Base_MspInit+0x48>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a0b      	ldr	r2, [pc, #44]	; (8003684 <HAL_TIM_Base_MspInit+0x48>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
 800365e:	4b09      	ldr	r3, [pc, #36]	; (8003684 <HAL_TIM_Base_MspInit+0x48>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800366a:	2200      	movs	r2, #0
 800366c:	2100      	movs	r1, #0
 800366e:	201c      	movs	r0, #28
 8003670:	f7fd f887 	bl	8000782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003674:	201c      	movs	r0, #28
 8003676:	f7fd f8a0 	bl	80007ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800367a:	bf00      	nop
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800

08003688 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <MX_USART1_UART_Init+0x4c>)
 800368e:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <MX_USART1_UART_Init+0x50>)
 8003690:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003692:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <MX_USART1_UART_Init+0x4c>)
 8003694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003698:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800369a:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <MX_USART1_UART_Init+0x4c>)
 800369c:	2200      	movs	r2, #0
 800369e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <MX_USART1_UART_Init+0x4c>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036a6:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <MX_USART1_UART_Init+0x4c>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <MX_USART1_UART_Init+0x4c>)
 80036ae:	220c      	movs	r2, #12
 80036b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036b2:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <MX_USART1_UART_Init+0x4c>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <MX_USART1_UART_Init+0x4c>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036be:	4805      	ldr	r0, [pc, #20]	; (80036d4 <MX_USART1_UART_Init+0x4c>)
 80036c0:	f7fe fe44 	bl	800234c <HAL_UART_Init>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80036ca:	f7ff fecf 	bl	800346c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	200000f8 	.word	0x200000f8
 80036d8:	40011000 	.word	0x40011000

080036dc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <MX_USART2_UART_Init+0x4c>)
 80036e2:	4a12      	ldr	r2, [pc, #72]	; (800372c <MX_USART2_UART_Init+0x50>)
 80036e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <MX_USART2_UART_Init+0x4c>)
 80036e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036ee:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <MX_USART2_UART_Init+0x4c>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <MX_USART2_UART_Init+0x4c>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036fa:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <MX_USART2_UART_Init+0x4c>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <MX_USART2_UART_Init+0x4c>)
 8003702:	220c      	movs	r2, #12
 8003704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003706:	4b08      	ldr	r3, [pc, #32]	; (8003728 <MX_USART2_UART_Init+0x4c>)
 8003708:	2200      	movs	r2, #0
 800370a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <MX_USART2_UART_Init+0x4c>)
 800370e:	2200      	movs	r2, #0
 8003710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003712:	4805      	ldr	r0, [pc, #20]	; (8003728 <MX_USART2_UART_Init+0x4c>)
 8003714:	f7fe fe1a 	bl	800234c <HAL_UART_Init>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800371e:	f7ff fea5 	bl	800346c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000180 	.word	0x20000180
 800372c:	40004400 	.word	0x40004400

08003730 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003734:	4b11      	ldr	r3, [pc, #68]	; (800377c <MX_USART6_UART_Init+0x4c>)
 8003736:	4a12      	ldr	r2, [pc, #72]	; (8003780 <MX_USART6_UART_Init+0x50>)
 8003738:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <MX_USART6_UART_Init+0x4c>)
 800373c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003740:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003742:	4b0e      	ldr	r3, [pc, #56]	; (800377c <MX_USART6_UART_Init+0x4c>)
 8003744:	2200      	movs	r2, #0
 8003746:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003748:	4b0c      	ldr	r3, [pc, #48]	; (800377c <MX_USART6_UART_Init+0x4c>)
 800374a:	2200      	movs	r2, #0
 800374c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800374e:	4b0b      	ldr	r3, [pc, #44]	; (800377c <MX_USART6_UART_Init+0x4c>)
 8003750:	2200      	movs	r2, #0
 8003752:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003754:	4b09      	ldr	r3, [pc, #36]	; (800377c <MX_USART6_UART_Init+0x4c>)
 8003756:	220c      	movs	r2, #12
 8003758:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800375a:	4b08      	ldr	r3, [pc, #32]	; (800377c <MX_USART6_UART_Init+0x4c>)
 800375c:	2200      	movs	r2, #0
 800375e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003760:	4b06      	ldr	r3, [pc, #24]	; (800377c <MX_USART6_UART_Init+0x4c>)
 8003762:	2200      	movs	r2, #0
 8003764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003766:	4805      	ldr	r0, [pc, #20]	; (800377c <MX_USART6_UART_Init+0x4c>)
 8003768:	f7fe fdf0 	bl	800234c <HAL_UART_Init>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003772:	f7ff fe7b 	bl	800346c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	2000013c 	.word	0x2000013c
 8003780:	40011400 	.word	0x40011400

08003784 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08e      	sub	sp, #56	; 0x38
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800378c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a6f      	ldr	r2, [pc, #444]	; (8003960 <HAL_UART_MspInit+0x1dc>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d135      	bne.n	8003812 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	623b      	str	r3, [r7, #32]
 80037aa:	4b6e      	ldr	r3, [pc, #440]	; (8003964 <HAL_UART_MspInit+0x1e0>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	4a6d      	ldr	r2, [pc, #436]	; (8003964 <HAL_UART_MspInit+0x1e0>)
 80037b0:	f043 0310 	orr.w	r3, r3, #16
 80037b4:	6453      	str	r3, [r2, #68]	; 0x44
 80037b6:	4b6b      	ldr	r3, [pc, #428]	; (8003964 <HAL_UART_MspInit+0x1e0>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	623b      	str	r3, [r7, #32]
 80037c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	4b67      	ldr	r3, [pc, #412]	; (8003964 <HAL_UART_MspInit+0x1e0>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	4a66      	ldr	r2, [pc, #408]	; (8003964 <HAL_UART_MspInit+0x1e0>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6313      	str	r3, [r2, #48]	; 0x30
 80037d2:	4b64      	ldr	r3, [pc, #400]	; (8003964 <HAL_UART_MspInit+0x1e0>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80037de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e4:	2302      	movs	r3, #2
 80037e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ec:	2303      	movs	r3, #3
 80037ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037f0:	2307      	movs	r3, #7
 80037f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037f8:	4619      	mov	r1, r3
 80037fa:	485b      	ldr	r0, [pc, #364]	; (8003968 <HAL_UART_MspInit+0x1e4>)
 80037fc:	f7fd fb72 	bl	8000ee4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003800:	2200      	movs	r2, #0
 8003802:	2100      	movs	r1, #0
 8003804:	2025      	movs	r0, #37	; 0x25
 8003806:	f7fc ffbc 	bl	8000782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800380a:	2025      	movs	r0, #37	; 0x25
 800380c:	f7fc ffd5 	bl	80007ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003810:	e0a1      	b.n	8003956 <HAL_UART_MspInit+0x1d2>
  else if(uartHandle->Instance==USART2)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a55      	ldr	r2, [pc, #340]	; (800396c <HAL_UART_MspInit+0x1e8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d162      	bne.n	80038e2 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800381c:	2300      	movs	r3, #0
 800381e:	61bb      	str	r3, [r7, #24]
 8003820:	4b50      	ldr	r3, [pc, #320]	; (8003964 <HAL_UART_MspInit+0x1e0>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	4a4f      	ldr	r2, [pc, #316]	; (8003964 <HAL_UART_MspInit+0x1e0>)
 8003826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800382a:	6413      	str	r3, [r2, #64]	; 0x40
 800382c:	4b4d      	ldr	r3, [pc, #308]	; (8003964 <HAL_UART_MspInit+0x1e0>)
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	4b49      	ldr	r3, [pc, #292]	; (8003964 <HAL_UART_MspInit+0x1e0>)
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	4a48      	ldr	r2, [pc, #288]	; (8003964 <HAL_UART_MspInit+0x1e0>)
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	6313      	str	r3, [r2, #48]	; 0x30
 8003848:	4b46      	ldr	r3, [pc, #280]	; (8003964 <HAL_UART_MspInit+0x1e0>)
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003854:	230c      	movs	r3, #12
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003858:	2302      	movs	r3, #2
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385c:	2300      	movs	r3, #0
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003860:	2303      	movs	r3, #3
 8003862:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003864:	2307      	movs	r3, #7
 8003866:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800386c:	4619      	mov	r1, r3
 800386e:	483e      	ldr	r0, [pc, #248]	; (8003968 <HAL_UART_MspInit+0x1e4>)
 8003870:	f7fd fb38 	bl	8000ee4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003874:	4b3e      	ldr	r3, [pc, #248]	; (8003970 <HAL_UART_MspInit+0x1ec>)
 8003876:	4a3f      	ldr	r2, [pc, #252]	; (8003974 <HAL_UART_MspInit+0x1f0>)
 8003878:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800387a:	4b3d      	ldr	r3, [pc, #244]	; (8003970 <HAL_UART_MspInit+0x1ec>)
 800387c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003880:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003882:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <HAL_UART_MspInit+0x1ec>)
 8003884:	2240      	movs	r2, #64	; 0x40
 8003886:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003888:	4b39      	ldr	r3, [pc, #228]	; (8003970 <HAL_UART_MspInit+0x1ec>)
 800388a:	2200      	movs	r2, #0
 800388c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800388e:	4b38      	ldr	r3, [pc, #224]	; (8003970 <HAL_UART_MspInit+0x1ec>)
 8003890:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003894:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003896:	4b36      	ldr	r3, [pc, #216]	; (8003970 <HAL_UART_MspInit+0x1ec>)
 8003898:	2200      	movs	r2, #0
 800389a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800389c:	4b34      	ldr	r3, [pc, #208]	; (8003970 <HAL_UART_MspInit+0x1ec>)
 800389e:	2200      	movs	r2, #0
 80038a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80038a2:	4b33      	ldr	r3, [pc, #204]	; (8003970 <HAL_UART_MspInit+0x1ec>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038a8:	4b31      	ldr	r3, [pc, #196]	; (8003970 <HAL_UART_MspInit+0x1ec>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038ae:	4b30      	ldr	r3, [pc, #192]	; (8003970 <HAL_UART_MspInit+0x1ec>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80038b4:	482e      	ldr	r0, [pc, #184]	; (8003970 <HAL_UART_MspInit+0x1ec>)
 80038b6:	f7fc ff9b 	bl	80007f0 <HAL_DMA_Init>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_UART_MspInit+0x140>
      Error_Handler();
 80038c0:	f7ff fdd4 	bl	800346c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a2a      	ldr	r2, [pc, #168]	; (8003970 <HAL_UART_MspInit+0x1ec>)
 80038c8:	635a      	str	r2, [r3, #52]	; 0x34
 80038ca:	4a29      	ldr	r2, [pc, #164]	; (8003970 <HAL_UART_MspInit+0x1ec>)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038d0:	2200      	movs	r2, #0
 80038d2:	2100      	movs	r1, #0
 80038d4:	2026      	movs	r0, #38	; 0x26
 80038d6:	f7fc ff54 	bl	8000782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038da:	2026      	movs	r0, #38	; 0x26
 80038dc:	f7fc ff6d 	bl	80007ba <HAL_NVIC_EnableIRQ>
}
 80038e0:	e039      	b.n	8003956 <HAL_UART_MspInit+0x1d2>
  else if(uartHandle->Instance==USART6)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a24      	ldr	r2, [pc, #144]	; (8003978 <HAL_UART_MspInit+0x1f4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d134      	bne.n	8003956 <HAL_UART_MspInit+0x1d2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	4b1c      	ldr	r3, [pc, #112]	; (8003964 <HAL_UART_MspInit+0x1e0>)
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <HAL_UART_MspInit+0x1e0>)
 80038f6:	f043 0320 	orr.w	r3, r3, #32
 80038fa:	6453      	str	r3, [r2, #68]	; 0x44
 80038fc:	4b19      	ldr	r3, [pc, #100]	; (8003964 <HAL_UART_MspInit+0x1e0>)
 80038fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	4b15      	ldr	r3, [pc, #84]	; (8003964 <HAL_UART_MspInit+0x1e0>)
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	4a14      	ldr	r2, [pc, #80]	; (8003964 <HAL_UART_MspInit+0x1e0>)
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	6313      	str	r3, [r2, #48]	; 0x30
 8003918:	4b12      	ldr	r3, [pc, #72]	; (8003964 <HAL_UART_MspInit+0x1e0>)
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003924:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392a:	2302      	movs	r3, #2
 800392c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392e:	2300      	movs	r3, #0
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003932:	2303      	movs	r3, #3
 8003934:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003936:	2308      	movs	r3, #8
 8003938:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800393a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800393e:	4619      	mov	r1, r3
 8003940:	4809      	ldr	r0, [pc, #36]	; (8003968 <HAL_UART_MspInit+0x1e4>)
 8003942:	f7fd facf 	bl	8000ee4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003946:	2200      	movs	r2, #0
 8003948:	2100      	movs	r1, #0
 800394a:	2047      	movs	r0, #71	; 0x47
 800394c:	f7fc ff19 	bl	8000782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003950:	2047      	movs	r0, #71	; 0x47
 8003952:	f7fc ff32 	bl	80007ba <HAL_NVIC_EnableIRQ>
}
 8003956:	bf00      	nop
 8003958:	3738      	adds	r7, #56	; 0x38
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40011000 	.word	0x40011000
 8003964:	40023800 	.word	0x40023800
 8003968:	40020000 	.word	0x40020000
 800396c:	40004400 	.word	0x40004400
 8003970:	20000098 	.word	0x20000098
 8003974:	400260a0 	.word	0x400260a0
 8003978:	40011400 	.word	0x40011400

0800397c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800397c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003980:	480d      	ldr	r0, [pc, #52]	; (80039b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003982:	490e      	ldr	r1, [pc, #56]	; (80039bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003984:	4a0e      	ldr	r2, [pc, #56]	; (80039c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003988:	e002      	b.n	8003990 <LoopCopyDataInit>

0800398a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800398a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800398c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800398e:	3304      	adds	r3, #4

08003990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003994:	d3f9      	bcc.n	800398a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003996:	4a0b      	ldr	r2, [pc, #44]	; (80039c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003998:	4c0b      	ldr	r4, [pc, #44]	; (80039c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800399a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800399c:	e001      	b.n	80039a2 <LoopFillZerobss>

0800399e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800399e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039a0:	3204      	adds	r2, #4

080039a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039a4:	d3fb      	bcc.n	800399e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80039a6:	f7ff fde9 	bl	800357c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039aa:	f000 f811 	bl	80039d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039ae:	f7ff fccf 	bl	8003350 <main>
  bx  lr    
 80039b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80039b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039bc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80039c0:	08003a70 	.word	0x08003a70
  ldr r2, =_sbss
 80039c4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80039c8:	200001c4 	.word	0x200001c4

080039cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039cc:	e7fe      	b.n	80039cc <ADC_IRQHandler>
	...

080039d0 <__libc_init_array>:
 80039d0:	b570      	push	{r4, r5, r6, lr}
 80039d2:	4e0d      	ldr	r6, [pc, #52]	; (8003a08 <__libc_init_array+0x38>)
 80039d4:	4c0d      	ldr	r4, [pc, #52]	; (8003a0c <__libc_init_array+0x3c>)
 80039d6:	1ba4      	subs	r4, r4, r6
 80039d8:	10a4      	asrs	r4, r4, #2
 80039da:	2500      	movs	r5, #0
 80039dc:	42a5      	cmp	r5, r4
 80039de:	d109      	bne.n	80039f4 <__libc_init_array+0x24>
 80039e0:	4e0b      	ldr	r6, [pc, #44]	; (8003a10 <__libc_init_array+0x40>)
 80039e2:	4c0c      	ldr	r4, [pc, #48]	; (8003a14 <__libc_init_array+0x44>)
 80039e4:	f000 f820 	bl	8003a28 <_init>
 80039e8:	1ba4      	subs	r4, r4, r6
 80039ea:	10a4      	asrs	r4, r4, #2
 80039ec:	2500      	movs	r5, #0
 80039ee:	42a5      	cmp	r5, r4
 80039f0:	d105      	bne.n	80039fe <__libc_init_array+0x2e>
 80039f2:	bd70      	pop	{r4, r5, r6, pc}
 80039f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039f8:	4798      	blx	r3
 80039fa:	3501      	adds	r5, #1
 80039fc:	e7ee      	b.n	80039dc <__libc_init_array+0xc>
 80039fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a02:	4798      	blx	r3
 8003a04:	3501      	adds	r5, #1
 8003a06:	e7f2      	b.n	80039ee <__libc_init_array+0x1e>
 8003a08:	08003a68 	.word	0x08003a68
 8003a0c:	08003a68 	.word	0x08003a68
 8003a10:	08003a68 	.word	0x08003a68
 8003a14:	08003a6c 	.word	0x08003a6c

08003a18 <memset>:
 8003a18:	4402      	add	r2, r0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d100      	bne.n	8003a22 <memset+0xa>
 8003a20:	4770      	bx	lr
 8003a22:	f803 1b01 	strb.w	r1, [r3], #1
 8003a26:	e7f9      	b.n	8003a1c <memset+0x4>

08003a28 <_init>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	bf00      	nop
 8003a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2e:	bc08      	pop	{r3}
 8003a30:	469e      	mov	lr, r3
 8003a32:	4770      	bx	lr

08003a34 <_fini>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	bf00      	nop
 8003a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3a:	bc08      	pop	{r3}
 8003a3c:	469e      	mov	lr, r3
 8003a3e:	4770      	bx	lr
